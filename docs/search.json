[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Bienvenue sur mon blog",
    "section": "",
    "text": "Bienvenue sur mon blog !\n\n\n\n\n\n\nJe suis ravie de vous accueillir sur mon espace en ligne où je partage du code, des exercices et des réflexions sur l’économétrie, ainsi que sur d’autres sujets liés à l’analyse de données et à la programmation.\nEn tant qu’étudiante passionnée d’économétrie, j’ai créé ce blog pour partager avec vous mes découvertes, mes expériences et mes apprentissages dans ce domaine fascinant. Vous trouverez ici une variété de contenus, allant de tutoriels de programmation à des exercices pratiques en économétrie, en passant par des analyses de données et des conseils pour améliorer vos compétences analytiques.\nJ’espère que vous trouverez mes articles utiles, inspirants et enrichissants dans votre parcours d’apprentissage. N’hésitez pas à explorer les différentes sections, à poser des questions et à partager vos propres idées et expériences.\nMerci d’être ici et de faire partie de cette communauté dédiée à l’économétrie et à l’analyse de données !"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "olympicsWeather ?",
    "section": "",
    "text": "La library olympicsWeather fournit des fonctionnalités pour obtenir des prévisions météorologiques pour les sites olympiques. Voici comment installer le package en utilisant le package remotes depuis GitHub :\n\n\n# Utiliser remotes pour installer le package olympicsWeather depuis GitHub\nremotes::install_github(\"utilisateur/olympicsWeather\")\n\n\nCette section introduit le package olympicsWeather et explique comment l’installer depuis GitHub en utilisant le package remotes."
  },
  {
    "objectID": "posts/post-with-code/index.html#librairie-olympicsweather",
    "href": "posts/post-with-code/index.html#librairie-olympicsweather",
    "title": "olympicsWeather ?",
    "section": "",
    "text": "La library olympicsWeather fournit des fonctionnalités pour obtenir des prévisions météorologiques pour les sites olympiques. Voici comment installer le package en utilisant le package remotes depuis GitHub :\n\n\n# Utiliser remotes pour installer le package olympicsWeather depuis GitHub\nremotes::install_github(\"utilisateur/olympicsWeather\")\n\n\nCette section introduit le package olympicsWeather et explique comment l’installer depuis GitHub en utilisant le package remotes."
  },
  {
    "objectID": "posts/post-with-code/index.html#prévisions-météo-pour-le-stade-de-france",
    "href": "posts/post-with-code/index.html#prévisions-météo-pour-le-stade-de-france",
    "title": "olympicsWeather ?",
    "section": "Prévisions météo pour le Stade de France",
    "text": "Prévisions météo pour le Stade de France\nPour obtenir les prévisions météorologiques à 7 jours pour le Stade de France, nous pouvons utiliser la fonction get_forecast() ou get_forecast.character() en spécifiant “Stade de France” comme adresse :\n\nget_forecast(\"Stade de France\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.6 seconds\n\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                      4.6                              2.5\n 2 2024-03-06 23:00:00                      4.1                              1.6\n 3 2024-03-06 23:00:00                      3.6                              1.3\n 4 2024-03-06 23:00:00                      3                                0.5\n 5 2024-03-06 23:00:00                      2.7                              0.2\n 6 2024-03-06 23:00:00                      2.5                             -0.1\n 7 2024-03-06 23:00:00                      2.4                             -0.2\n 8 2024-03-06 23:00:00                      2.6                              0.1\n 9 2024-03-06 23:00:00                      4                                1.5\n10 2024-03-06 23:00:00                      6.8                              4.3\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;"
  },
  {
    "objectID": "posts/post-with-code/index.html#prévisions-météo-pour-tahiti",
    "href": "posts/post-with-code/index.html#prévisions-météo-pour-tahiti",
    "title": "olympicsWeather ?",
    "section": "Prévisions météo pour Tahiti",
    "text": "Prévisions météo pour Tahiti\nPour obtenir les prévisions météorologiques pour Tahiti, nous utilisons la fonction get_forecast() ou get_forecast.character() en spécifiant “Tahiti” comme adresse :\n\nget_forecast(\"Tahiti\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.2 seconds\n\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                     24.3                             27.8\n 2 2024-03-06 23:00:00                     22.9                             26.8\n 3 2024-03-06 23:00:00                     22.5                             25.3\n 4 2024-03-06 23:00:00                     22.3                             24.7\n 5 2024-03-06 23:00:00                     22                               24.5\n 6 2024-03-06 23:00:00                     22.3                             24.5\n 7 2024-03-06 23:00:00                     21.8                             24.8\n 8 2024-03-06 23:00:00                     21                               23.4\n 9 2024-03-06 23:00:00                     21                               23.3\n10 2024-03-06 23:00:00                     20.9                             23.8\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;"
  },
  {
    "objectID": "posts/post-with-code/index.html#prévisions-météo-pour-les-coordonnées-gps-43.276703-5.334791",
    "href": "posts/post-with-code/index.html#prévisions-météo-pour-les-coordonnées-gps-43.276703-5.334791",
    "title": "olympicsWeather ?",
    "section": "Prévisions météo pour les coordonnées GPS 43.276703, 5.334791",
    "text": "Prévisions météo pour les coordonnées GPS 43.276703, 5.334791\nPour obtenir les prévisions météorologiques pour les coordonnées GPS 43.276703, 5.334791, nous pouvons utiliser la fonction get_forecast ou``get_forecast.numeric:\n\nget_forecast(c(43.276703, 5.334791))\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                     27.1                             28.6\n 2 2024-03-06 23:00:00                     26.2                             28.3\n 3 2024-03-06 23:00:00                     25.5                             27.9\n 4 2024-03-06 23:00:00                     25                               27.7\n 5 2024-03-06 23:00:00                     25                               27.9\n 6 2024-03-06 23:00:00                     26.7                             28.8\n 7 2024-03-06 23:00:00                     29                               30.5\n 8 2024-03-06 23:00:00                     31.3                             33.5\n 9 2024-03-06 23:00:00                     33.5                             36.7\n10 2024-03-06 23:00:00                     34.9                             38.5\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\n\nAssurez-vous d’ajuster les fonctions et les arguments en fonction de la structure et de la logique de votre code. Ceux-ci servent simplement d’exemples pour illustrer comment vous pourriez inclure les différentes requêtes météorologiques dans votre post de blog."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mon blog",
    "section": "",
    "text": "Exercices - Semaine 1\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 7, 2024\n\n\n\n\n\n\n  \n\n\n\n\nExercices - Semaine 2\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 7, 2024\n\n\n\n\n\n\n  \n\n\n\n\nExercices - Semaine 3\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 7, 2024\n\n\n\n\n\n\n  \n\n\n\n\nExercices - Semaine 4\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 7, 2024\n\n\n\n\n\n\n  \n\n\n\n\nolympicsWeather ?\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 7, 2024\n\n\nAmel Dahmani\n\n\n\n\n\n\n  \n\n\n\n\nBienvenue sur mon blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2024\n\n\nAmel\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/Exercice4.html",
    "href": "posts/post-with-code/Exercice4.html",
    "title": "Exercices - Semaine 4",
    "section": "",
    "text": "library(devtools)\nlibrary(httr2)\nlibrary(jsonlite)\nlibrary(usethis)\nlibrary(htmltools)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(leaflet)\nlibrary(sf)\nlibrary(testthat)\nlibrary(tidygeocoder)\nlibrary(roxygen2)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\n\n\n\n\n\n\n\nusethis::create_package(\"olympicsWeather\")\n\n\n\n\n\n\n\n\nusethis::use_r(\"get_weather_forecast\")\n\n✔ Setting active project to '/Users/ameldahmani/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/my_blog'\n• Edit 'R/get_weather_forecast.R'\n\n\n\n\n\n\n\n• l’url de l’api open-api est la suivante: https://api.open-meteo.com/v1/forecast\n• vous utiliserez les fonctions request, req_url_query, req_perform, resp_body_json pour passer la requête. Ces instructions peuvent se chaîner avec des pipes. La fonction request permet d’initialiser l’objet de request en passant l’url de l’api. La fonction req_url_query permet de passer différents paramètres à la requête, quand req_perform exécute la requête et récupère les résultats dans la session R. Enfin, la fonction resp_body_json extrait les données retournées en json du résultat de la requête. Vous pourrez utiliser la fonction tibble::as_tibble() pour convertir en tibble la table retournée.\n• pour la première requête, nous souhaitons obtenir la prévision météo aux coordonnées géographiques c(48.85, 2.35)\n•nous souhaitons obtenir les informations de températures, de températures ressenties, de probabilité de précipitation, et de quantités de précipitations. Indice, vous devrez passer le paramètre suivant (entre autres) hourly= c(“temperature_2m”, “apparent_temperature”, “precipitation_probability”, “precipitation”) à la fonction req_url_query\n\n\nurl &lt;- \"https://api.open-meteo.com/v1/forecast\"\nrequest(url) |&gt;\n  req_url_query(latitude = 48.85,\n                longitude = 2.35,\n                hourly= c(\"temperature_2m\",\n                          \"apparent_temperature\",\n                          \"precipitation_probability\",\n                          \"precipitation\"),\n                .multi = \"comma\") |&gt;\n  req_perform() |&gt;\n  resp_body_json() |&gt;\n  tibble::as_tibble()\n\n# A tibble: 5 × 9\n  latitude longitude generationtime_ms utc_offset_seconds timezone\n     &lt;dbl&gt;     &lt;dbl&gt;             &lt;dbl&gt;              &lt;int&gt; &lt;chr&gt;   \n1     48.8      2.36             0.193                  0 GMT     \n2     48.8      2.36             0.193                  0 GMT     \n3     48.8      2.36             0.193                  0 GMT     \n4     48.8      2.36             0.193                  0 GMT     \n5     48.8      2.36             0.193                  0 GMT     \n# ℹ 4 more variables: timezone_abbreviation &lt;chr&gt;, elevation &lt;dbl&gt;,\n#   hourly_units &lt;named list&gt;, hourly &lt;named list&gt;\n\n\n\n\n\n\n\n\n\nNous avons obtenu un tibble qui contient plusieurs informations météorologiques pour un endroit spécifique situé à la latitude 48.85 et la longitude 2.85.\nCe tibble comporte cinq lignes, chacune représentant un aspect différent des données météorologiques.\nIl est par ailleurs composé de neuf colonnes, incluant notamment les latitudes et longitudes, les unités des mesures horaires de chaque ligne, l’abréviation du fuseau horaire, le fuseau goraire, l’élévation de l’endroit, et une colonne appelée “hourly”, qui présente les horaires et qui est particulièrement intéressante. Dans cette colonne “hourly”, chaque paramètre météorologique est représenté par une liste, reflétant son évolution dans le temps à une adresse spécifique. Ainsi, pour chaque site, nous pouvons observer comment les différents paramètres météorologiques évoluent heure par heure.\nCependant, pour collecter les prévisions météorologiques pour tous les sites des Jeux Olympiques, il est nécessaire d’ajuster la longitude et la latitude correspondant à chaque site. Par conséquent, nous devons créer une fonction qui recueille initialement la latitude et la longitude pour chaque site olympique. Cette fonction nous permettra d’interroger l’API météo avec les coordonnées correctes pour obtenir les données météorologiques spécifiques à chaque site. En ajustant les coordonnées, nous pourrons ainsi obtenir les prévisions météorologiques pour tous les sites des Jeux Olympiques.\n\n\n\n\n\n\n\n\n\n\n\n\n\n• la fonction perform request prend en entrée deux arguments: latitude et longitude\n• elle effectue la requête sur l’api publique ci-dessus, et retourne le contenu du body sous forme d’une tibble (exactement comme dans la question 4)\n\n\n#' @param latitude latitude (numeric)\n#' @param longitude longitude (numeric)\n#' @return le contenu du body sous forme d'un tibble de 5 lignes et 9 colonnes\nperform_request &lt;- function(latitude, longitude){\n  url &lt;- \"https://api.open-meteo.com/v1/forecast\"\n  request(url) |&gt;\n    req_url_query(latitude = latitude,\n                  longitude = longitude,\n                  hourly= c(\"temperature_2m\",\n                            \"apparent_temperature\",\n                            \"precipitation_probability\",\n                            \"precipitation\"),\n                  .multi = \"comma\") |&gt;\n    req_perform() |&gt;\n    resp_body_json() |&gt;\n    as_tibble()\n}\nresp &lt;- perform_request(47.216671, -1.55)\nresp\n\n# A tibble: 5 × 9\n  latitude longitude generationtime_ms utc_offset_seconds timezone\n     &lt;dbl&gt;     &lt;dbl&gt;             &lt;dbl&gt;              &lt;int&gt; &lt;chr&gt;   \n1     47.2     -1.55             0.258                  0 GMT     \n2     47.2     -1.55             0.258                  0 GMT     \n3     47.2     -1.55             0.258                  0 GMT     \n4     47.2     -1.55             0.258                  0 GMT     \n5     47.2     -1.55             0.258                  0 GMT     \n# ℹ 4 more variables: timezone_abbreviation &lt;chr&gt;, elevation &lt;dbl&gt;,\n#   hourly_units &lt;named list&gt;, hourly &lt;named list&gt;\n\n\nNotre fonction opère de manière efficace, permettant la récupération des données météorologiques de tout point en utilisant simplement ses coordonnées GPS, à savoir, la latitude et la longitude.\n\n\n\n\n\n\n• les résultats obtenus après la requête n’étant pas bien formattés, il faut écrire une fonction pour transformer la forme de la tibble obtenue\n• la fonction en entrée prendre une tibble au format issu de la requête\n• et retournera les mêmes données au schema suivant:\n– date_heure: heure au tz UTC\n– tempature_celsius: données de température\n– temperature_ressentie_celsius: données de température ressentie\n– precipation_proba: probabilité de pluie\n– precipitation: precipitation en mm\n\n#' Décompacte les données de réponse des prévisions météorologiques.\n#'\n#' @param resp Résultat de la fonction précédente, tibble 5x9\n#' @return Un nouveau tibble comprenant 168 observations et 5 variables\n#' @export\nunnest_response &lt;- function(resp){\n  hourly_donnees &lt;- resp$hourly\n  if (length(hourly_donnees) == 0) {\n    stop(\"Aucune donnée dans la colonne 'hourly'.\")\n  }\n  output_tibble &lt;- tibble(\n    \"heure au tz UTC\" = with_tz(unlist(hourly_donnees[[1]]), tzone = \"UTC\"),\n    \"données de température\" = unlist(hourly_donnees[[2]]),\n    \"données de température ressentie\" = unlist(hourly_donnees[[3]]),\n    \"probabilité de pluie\" = unlist(hourly_donnees[[4]]),\n    \"precipitation en mm\" = unlist(hourly_donnees[[5]])\n  )\n  return(output_tibble)\n}\nresp2 &lt;- unnest_response(resp)\nresp2\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                      5.9                              3.2\n 2 2024-03-06 23:00:00                      5.4                              2.5\n 3 2024-03-06 23:00:00                      6.3                              2.9\n 4 2024-03-06 23:00:00                      5.7                              2.6\n 5 2024-03-06 23:00:00                      5.6                              2.3\n 6 2024-03-06 23:00:00                      4.8                              1.4\n 7 2024-03-06 23:00:00                      4.7                              0.9\n 8 2024-03-06 23:00:00                      4.7                              0.9\n 9 2024-03-06 23:00:00                      5.2                              1.1\n10 2024-03-06 23:00:00                      7.4                              2.6\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\n\n\n\n\n\n\n\n• créez un script de tests en utilisant la fonction usethis::use_test(“unnest_response”)\n• dans ce script, créez un jeu de données minimal pour tester le comportement de la fonction\n• testez la fonction, en proposant plusieurs tests unitaires. Exemple de tests unitaires:\n– testez que la fonction renvoie le bon nombre de lignes\n– testez que les valeurs de la colonne temperature correspondent aux valeur proposées en entrée\n– testez le nom des colonnes en sortie\n– testez le nombre de colonnes en sortie\n\nusethis::use_test(\"unnest_response\")\ntestthat::test_dir('tests/testthat/')\n\n\n\n\ntest_resp &lt;- list(\n  hourly = list(\n    heure = ymd_hms(\"2024-03-05 08:00:00\", tz = \"UTC\"),\n    temperature = c(10, 12, 14),\n    temperature_ressentie = c(8, 10, 12),\n    probabilite_pluie = c(0.1, 0.2, 0.3),\n    precipitation_mm = c(0, 0.5, 1)\n  )\n)\n\n\n\n\n\ntest_that(\"La fonction renvoie le bon nombre de lignes\", {\n  resp &lt;- unnest_response(test_resp)\n  expect_equal(nrow(resp), 3)\n})\n\nTest passed 🥇\n\n\n\n\n\n\ntest_that(\"Les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée\", {\n  resp &lt;- unnest_response(test_resp)\n  expect_equal(resp$`données de température`, c(10, 12, 14))\n})\n\nTest passed 😀\n\n\n\n\n\n\ntest_that(\"Le nom des colonnes en sortie est correct\", {\n  resp &lt;- unnest_response(test_resp)\n  expect_named(resp, c(\"heure au tz UTC\", \"données de température\", \"données de température ressentie\", \"probabilité de pluie\", \"precipitation en mm\"))\n})\n\nTest passed 🌈\n\n\n\n\n\n\ntest_that(\"Le nombre de colonnes en sortie est correct\", {\n  resp &lt;- unnest_response(test_resp)\n  expect_equal(ncol(resp), 5)\n})\n\nTest passed 🌈\n\n\nLa fonction “unnest_response” réussit tous les tests.\n\n\n\n\n\n\n\n\n• coordonnées GPS, i.e un vecteur numérique de taille 2\n\n• un nom de site olympique ou une adresse. A partir du code de la séance 1, définissez une fonction address_to_gps convertissant une adresse en coordonnées gps sous la forme d’un vecteur numérique de taille 2.\nDéfinir une fonction get_forecast générique, et deux implémentations get_forecast.character et get_forecast.numeric.\n\n#' Convertit une adresse en coordonnées GPS.\n#'\n#' @param adresse Adresse à géocoder\n#' @return Coordonnées GPS obtenues à partir de l'adresse\naddress_to_gps &lt;- function(adresse) {\n  df_adresse &lt;- data.frame(\"nom\" = character(), addr = character(), stringsAsFactors = FALSE)\n\n  df_adresse &lt;- rbind(df_adresse, data.frame(addr = adresse), stringsAsFactors = FALSE)\n\n  resultat_geocodage &lt;- df_adresse |&gt;\n    geocode(addr, method = 'arcgis')\n\n  df_adresse &lt;- resultat_geocodage\n\n  return(df_adresse)\n  print(df_adresse)\n}\n\nresultat10 &lt;- as_tibble(address_to_gps(\"Bâtiment Erdre, Chem. de la Censive du Tertre, 44300 Nantes\"))\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.6 seconds\n\nresultat10\n\n# A tibble: 1 × 3\n  addr                                                          lat  long\n  &lt;chr&gt;                                                       &lt;dbl&gt; &lt;dbl&gt;\n1 Bâtiment Erdre, Chem. de la Censive du Tertre, 44300 Nantes  47.2 -1.55\n\nlibrary(leaflet)\ncarte &lt;- leaflet()  |&gt; \n  addTiles()  |&gt; \n  addMarkers(lng = resultat10$long, lat = resultat10$lat, popup = \"IAE Nantes\")\ncarte\n\n\n\n\n\n\n\n\nget_forecast &lt;- function(location, ...) {\n  UseMethod(\"get_forecast\", location)\n}\n\n\n\n\n\nget_forecast.character &lt;- function(location, ...) {\n  coords &lt;- address_to_gps(location)\n  return(perform_request(coords[2], coords[1], ...))\n}\n\n\n\n\n\nget_forecast.numeric &lt;- function(location, ...) {\n  return(perform_request(location[2], location[1], ...))\n}\n\n\nPour valider l’exactitude des coordonnées de l’adresse renseignée, il convenait d’utiliser la fonction pour récupérer les coordonnées GPS associées à cette adresse. Ensuite, de visualier la cartographique qui affiche ces coordonnées sur une carte géographique. Cette visualisation a permis de vérifier visuellement si les coordonnées récupérées correspondent à l’emplacement attendu sur la carte.\n\n\n\n\n\n\n\n\n#' Obtient les coordonnées GPS à partir d'une adresse.\n#'\n#' @param adresse Adresse à géocoder\n#' @return Coordonnées GPS obtenues à partir de l'adresse\n#' @export\nget_gps_coordinate &lt;- function(adresse) {\n  resultat_geocodage &lt;- address_to_gps(adresse)\n\n  coordonnees &lt;- c(resultat_geocodage$lat, resultat_geocodage$long)\n\n  return(coordonnees)\n  print(coordonnees)\n}\n\nget_gps_coordinate(\"Bâtiment Erdre, Chem. de la Censive du Tertre, 44300 Nantes\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.1 seconds\n\n\n[1] 47.243140 -1.554258\n\n\nNotre fonction renvoie avec précision les coordonnées du lieu demandé.\n\n\n\n\n\n\n\n\n#' Obtient les prévisions météorologiques à partir de coordonnées GPS.\n#'\n#' @param xy Vecteur numérique avec x les latitudes et y les longitudes\n#' @return Un tibble 168x5\n#' @export\nget_forecast.numeric &lt;- function(xy, ...) {\n  if (!is.numeric(xy) || length(xy) != 2) {\n    stop(\"Erreur ! L'argument xy doit être un vecteur numérique de taille 2 !\")\n  }\n\n  response_table &lt;- perform_request(xy[2], xy[1], ...)\n\n  unnested_table &lt;- unnest_response(response_table)\n\n  return(unnested_table)\n}\n\nxy &lt;- c(47.243140, -1.554258)\nresultat12 &lt;- get_forecast.numeric(xy)\nresultat12\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                     28.3                             34.2\n 2 2024-03-06 23:00:00                     28.2                             34.3\n 3 2024-03-06 23:00:00                     28.2                             34.4\n 4 2024-03-06 23:00:00                     28.1                             34.5\n 5 2024-03-06 23:00:00                     28.1                             34.7\n 6 2024-03-06 23:00:00                     28                               34.3\n 7 2024-03-06 23:00:00                     28.1                             34.1\n 8 2024-03-06 23:00:00                     28                               34.4\n 9 2024-03-06 23:00:00                     28                               35.2\n10 2024-03-06 23:00:00                     28                               35  \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\n\n\nNotre fonction est efficace puisqu’elle signale correctement les erreurs lorsque le vecteur n’est ni numérique ni de taille 2, et récupère avec succès les données météorologiques pour les coordonnées fournies lorsqu’elles sont un vecteur numérique de taille 2.\n\n\n\n\n\n\n\n\n#' Prévisions météorologiques à partir d'une adresse.\n#'\n#' @param adresse Adresse à géocoder\n#' @return Les prévisions météorologiques obtenues\n#' @export\nforecast.character &lt;- function(adresse) {\n  if (!is.character(adresse) || length(adresse) != 1) {\n    stop(\"L'argument address doit être de type character et de taille 1.\")\n  }\n}\n\n#' Obtient les prévisions météorologiques à partir d'une adresse.\n#'\n#' @param adresse Adresse à géocoder\n#' @return Les prévisions météorologiques obtenues\n#' @export\nget_forecast.character &lt;- function(adresse) {\n  forecast.character(adresse)\n  \n  coordinates &lt;- get_gps_coordinate(adresse)\n  \n  resultat_previsions &lt;- perform_request(latitude = coordinates[1], longitude = coordinates[2])\n  resultat_traitement &lt;- unnest_response(resultat_previsions)\n  \n  return(resultat_traitement)\n}\n\nget_forecast.character(\"46, rue Proudhon, 93210, Saint-Denis, France\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.9 seconds\n\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                      4.7                              2.7\n 2 2024-03-06 23:00:00                      4.1                              1.7\n 3 2024-03-06 23:00:00                      3.7                              1.5\n 4 2024-03-06 23:00:00                      3                                0.7\n 5 2024-03-06 23:00:00                      2.7                              0.4\n 6 2024-03-06 23:00:00                      2.5                             -0.1\n 7 2024-03-06 23:00:00                      2.4                              0  \n 8 2024-03-06 23:00:00                      2.6                              0.1\n 9 2024-03-06 23:00:00                      3.7                              1.4\n10 2024-03-06 23:00:00                      6.6                              4.2\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\nget_forecast.numeric(c(47.243140, -1.554258))\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                     28.3                             34.2\n 2 2024-03-06 23:00:00                     28.2                             34.3\n 3 2024-03-06 23:00:00                     28.2                             34.4\n 4 2024-03-06 23:00:00                     28.1                             34.5\n 5 2024-03-06 23:00:00                     28.1                             34.7\n 6 2024-03-06 23:00:00                     28                               34.3\n 7 2024-03-06 23:00:00                     28.1                             34.1\n 8 2024-03-06 23:00:00                     28                               34.4\n 9 2024-03-06 23:00:00                     28                               35.2\n10 2024-03-06 23:00:00                     28                               35  \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\n\nLa fonction opère correctement.\n\n\n\n\n\n\n#' get_forecast\n#'\n#' Cette fonction générique permet d'obtenir des prévisions météorologiques en fonction d'une localisation.\n#' Elle a deux implémentations spécifiques :\n#'   - get_forecast.character : pour obtenir des prévisions à partir d'un nom de site olympique ou d'une adresse.\n#'   - get_forecast.numeric : pour obtenir des prévisions à partir des coordonnées GPS.\n#'\n#' @param location Emplacement pour obtenir les prévisions (Adresse, nom de site olympique ou coordonnées GPS).\n#'   - Pour get_forecast.character : un caractère de taille 1.\n#'   - Pour get_forecast.numeric : un vecteur numérique de taille 2 (latitude, longitude).\n#' @return Un tibble contenant les prévisions météorologiques.\n#' @examples\n#' Exemples d'utilisation :\n#' \\dontrun{\n#'   # Exemples d'utilisation\n#'   get_forecast(\"Nantes\")\n#'   get_forecast(c(48.85, 2.35))\n#' }\n#'\n#' @seealso\n#' \\code{\\link{get_forecast.character}}, \\code{\\link{get_forecast.numeric}},\n#' \\code{\\link{perform_request}}, \\code{\\link{unnest_response}}\n#'\n#' @export\nget_forecast &lt;- function(x) {\n  if (is.numeric(x)) {\n    get_forecast.numeric(x)\n  } else if (is.character(x)) {\n    get_forecast.character(x)\n  } else {\n    stop(\"L'argument doit être de type numeric (coordonnées) ou character (adresse).\")\n  }\n}\n\nresultat14 &lt;-get_forecast(\"District de Huairou, Chine, 101406\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.1 seconds\n\nprint(resultat14)\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                      1.4                             -2.2\n 2 2024-03-06 23:00:00                      3.3                             -0.3\n 3 2024-03-06 23:00:00                      5.4                              1.4\n 4 2024-03-06 23:00:00                      7.2                              3.4\n 5 2024-03-06 23:00:00                      9.1                              6.2\n 6 2024-03-06 23:00:00                     10.9                              7.9\n 7 2024-03-06 23:00:00                     10.9                              7.4\n 8 2024-03-06 23:00:00                     11.2                              6  \n 9 2024-03-06 23:00:00                     10.9                              5.5\n10 2024-03-06 23:00:00                     10.5                              5.5\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\nresultat14bis &lt;-get_forecast(c(47.243140, -1.554258))\nprint(resultat14bis)\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                     28.3                             34.2\n 2 2024-03-06 23:00:00                     28.2                             34.3\n 3 2024-03-06 23:00:00                     28.2                             34.4\n 4 2024-03-06 23:00:00                     28.1                             34.5\n 5 2024-03-06 23:00:00                     28.1                             34.7\n 6 2024-03-06 23:00:00                     28                               34.3\n 7 2024-03-06 23:00:00                     28.1                             34.1\n 8 2024-03-06 23:00:00                     28                               34.4\n 9 2024-03-06 23:00:00                     28                               35.2\n10 2024-03-06 23:00:00                     28                               35  \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\nlibrary(olympicsWeather)\n\n\nAttaching package: 'olympicsWeather'\n\n\nThe following objects are masked _by_ '.GlobalEnv':\n\n    forecast.character, get_forecast, get_forecast.character,\n    get_forecast.numeric, get_gps_coordinate, perform_request,\n    unnest_response\n\nhelp(\"get_forecast\")\n\n\n\n\n\n\n\n\n#' Visualise les emplacements des prévisions météorologiques sur une carte Leaflet\n#'\n#' @param forecast_locations Un data frame contenant les emplacements des prévisions météorologiques avec au moins deux colonnes : long (longitude) et lat (latitude).\n#' @return Une carte Leaflet avec des marqueurs pour les emplacements des prévisions météorologiques.\n#' @export\nvisualiser_carte &lt;- function(forecast_locations) {\n  require(leaflet)\n  \n  ma_carte &lt;- leaflet() %&gt;%\n    addTiles() %&gt;%\n    addMarkers(lng = forecast_locations$long, lat = forecast_locations$lat)\n  \n  return(ma_carte)\n}\n\n\n#exemple d'utilisation \nexemple1 &lt;- data.frame(\n  long = c(-0.1278, -73.935242, 151.2093), \n  lat = c(51.5074, 40.730610, -33.8688)  \n)\nma_carte &lt;- visualiser_carte(exemple1)\nma_carte\n\n\n\n\n\n\n#' Visualise les prévisions météorologiques\n#'\n#' @param forecast_data Un data frame contenant les données de prévisions météorologiques avec au moins deux colonnes : date et température.\n#' @return Un objet ggplot représentant les prévisions météorologiques.\n#' @export\nvisualiser_previsions &lt;- function(forecast_data) {\n  require(ggplot2)\n  \n  ggplot(data = forecast_data, aes(x = date, y = temperature)) +\n    geom_line() +\n    labs(title = \"Prévision de la température\", x = \"Date\", y = \"Température (°C)\")\n}\n\n#exemple d'utilisation \nexemple2 &lt;- data.frame(\n  date = seq(as.Date(\"2022-01-01\"), by = \"day\", length.out = 7), \n  temperature = c(20, 22, 23, 25, 24, 23, 22) \n)\n\nmon_graph &lt;- visualiser_previsions(exemple2)\nprint(mon_graph)"
  },
  {
    "objectID": "posts/post-with-code/Exercice4.html#exercices---semaine-4",
    "href": "posts/post-with-code/Exercice4.html#exercices---semaine-4",
    "title": "Exercices - Semaine 4",
    "section": "",
    "text": "library(devtools)\nlibrary(httr2)\nlibrary(jsonlite)\nlibrary(usethis)\nlibrary(htmltools)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(leaflet)\nlibrary(sf)\nlibrary(testthat)\nlibrary(tidygeocoder)\nlibrary(roxygen2)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\n\n\n\n\n\n\n\nusethis::create_package(\"olympicsWeather\")\n\n\n\n\n\n\n\n\nusethis::use_r(\"get_weather_forecast\")\n\n✔ Setting active project to '/Users/ameldahmani/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/my_blog'\n• Edit 'R/get_weather_forecast.R'\n\n\n\n\n\n\n\n• l’url de l’api open-api est la suivante: https://api.open-meteo.com/v1/forecast\n• vous utiliserez les fonctions request, req_url_query, req_perform, resp_body_json pour passer la requête. Ces instructions peuvent se chaîner avec des pipes. La fonction request permet d’initialiser l’objet de request en passant l’url de l’api. La fonction req_url_query permet de passer différents paramètres à la requête, quand req_perform exécute la requête et récupère les résultats dans la session R. Enfin, la fonction resp_body_json extrait les données retournées en json du résultat de la requête. Vous pourrez utiliser la fonction tibble::as_tibble() pour convertir en tibble la table retournée.\n• pour la première requête, nous souhaitons obtenir la prévision météo aux coordonnées géographiques c(48.85, 2.35)\n•nous souhaitons obtenir les informations de températures, de températures ressenties, de probabilité de précipitation, et de quantités de précipitations. Indice, vous devrez passer le paramètre suivant (entre autres) hourly= c(“temperature_2m”, “apparent_temperature”, “precipitation_probability”, “precipitation”) à la fonction req_url_query\n\n\nurl &lt;- \"https://api.open-meteo.com/v1/forecast\"\nrequest(url) |&gt;\n  req_url_query(latitude = 48.85,\n                longitude = 2.35,\n                hourly= c(\"temperature_2m\",\n                          \"apparent_temperature\",\n                          \"precipitation_probability\",\n                          \"precipitation\"),\n                .multi = \"comma\") |&gt;\n  req_perform() |&gt;\n  resp_body_json() |&gt;\n  tibble::as_tibble()\n\n# A tibble: 5 × 9\n  latitude longitude generationtime_ms utc_offset_seconds timezone\n     &lt;dbl&gt;     &lt;dbl&gt;             &lt;dbl&gt;              &lt;int&gt; &lt;chr&gt;   \n1     48.8      2.36             0.193                  0 GMT     \n2     48.8      2.36             0.193                  0 GMT     \n3     48.8      2.36             0.193                  0 GMT     \n4     48.8      2.36             0.193                  0 GMT     \n5     48.8      2.36             0.193                  0 GMT     \n# ℹ 4 more variables: timezone_abbreviation &lt;chr&gt;, elevation &lt;dbl&gt;,\n#   hourly_units &lt;named list&gt;, hourly &lt;named list&gt;\n\n\n\n\n\n\n\n\n\nNous avons obtenu un tibble qui contient plusieurs informations météorologiques pour un endroit spécifique situé à la latitude 48.85 et la longitude 2.85.\nCe tibble comporte cinq lignes, chacune représentant un aspect différent des données météorologiques.\nIl est par ailleurs composé de neuf colonnes, incluant notamment les latitudes et longitudes, les unités des mesures horaires de chaque ligne, l’abréviation du fuseau horaire, le fuseau goraire, l’élévation de l’endroit, et une colonne appelée “hourly”, qui présente les horaires et qui est particulièrement intéressante. Dans cette colonne “hourly”, chaque paramètre météorologique est représenté par une liste, reflétant son évolution dans le temps à une adresse spécifique. Ainsi, pour chaque site, nous pouvons observer comment les différents paramètres météorologiques évoluent heure par heure.\nCependant, pour collecter les prévisions météorologiques pour tous les sites des Jeux Olympiques, il est nécessaire d’ajuster la longitude et la latitude correspondant à chaque site. Par conséquent, nous devons créer une fonction qui recueille initialement la latitude et la longitude pour chaque site olympique. Cette fonction nous permettra d’interroger l’API météo avec les coordonnées correctes pour obtenir les données météorologiques spécifiques à chaque site. En ajustant les coordonnées, nous pourrons ainsi obtenir les prévisions météorologiques pour tous les sites des Jeux Olympiques.\n\n\n\n\n\n\n\n\n\n\n\n\n\n• la fonction perform request prend en entrée deux arguments: latitude et longitude\n• elle effectue la requête sur l’api publique ci-dessus, et retourne le contenu du body sous forme d’une tibble (exactement comme dans la question 4)\n\n\n#' @param latitude latitude (numeric)\n#' @param longitude longitude (numeric)\n#' @return le contenu du body sous forme d'un tibble de 5 lignes et 9 colonnes\nperform_request &lt;- function(latitude, longitude){\n  url &lt;- \"https://api.open-meteo.com/v1/forecast\"\n  request(url) |&gt;\n    req_url_query(latitude = latitude,\n                  longitude = longitude,\n                  hourly= c(\"temperature_2m\",\n                            \"apparent_temperature\",\n                            \"precipitation_probability\",\n                            \"precipitation\"),\n                  .multi = \"comma\") |&gt;\n    req_perform() |&gt;\n    resp_body_json() |&gt;\n    as_tibble()\n}\nresp &lt;- perform_request(47.216671, -1.55)\nresp\n\n# A tibble: 5 × 9\n  latitude longitude generationtime_ms utc_offset_seconds timezone\n     &lt;dbl&gt;     &lt;dbl&gt;             &lt;dbl&gt;              &lt;int&gt; &lt;chr&gt;   \n1     47.2     -1.55             0.258                  0 GMT     \n2     47.2     -1.55             0.258                  0 GMT     \n3     47.2     -1.55             0.258                  0 GMT     \n4     47.2     -1.55             0.258                  0 GMT     \n5     47.2     -1.55             0.258                  0 GMT     \n# ℹ 4 more variables: timezone_abbreviation &lt;chr&gt;, elevation &lt;dbl&gt;,\n#   hourly_units &lt;named list&gt;, hourly &lt;named list&gt;\n\n\nNotre fonction opère de manière efficace, permettant la récupération des données météorologiques de tout point en utilisant simplement ses coordonnées GPS, à savoir, la latitude et la longitude.\n\n\n\n\n\n\n• les résultats obtenus après la requête n’étant pas bien formattés, il faut écrire une fonction pour transformer la forme de la tibble obtenue\n• la fonction en entrée prendre une tibble au format issu de la requête\n• et retournera les mêmes données au schema suivant:\n– date_heure: heure au tz UTC\n– tempature_celsius: données de température\n– temperature_ressentie_celsius: données de température ressentie\n– precipation_proba: probabilité de pluie\n– precipitation: precipitation en mm\n\n#' Décompacte les données de réponse des prévisions météorologiques.\n#'\n#' @param resp Résultat de la fonction précédente, tibble 5x9\n#' @return Un nouveau tibble comprenant 168 observations et 5 variables\n#' @export\nunnest_response &lt;- function(resp){\n  hourly_donnees &lt;- resp$hourly\n  if (length(hourly_donnees) == 0) {\n    stop(\"Aucune donnée dans la colonne 'hourly'.\")\n  }\n  output_tibble &lt;- tibble(\n    \"heure au tz UTC\" = with_tz(unlist(hourly_donnees[[1]]), tzone = \"UTC\"),\n    \"données de température\" = unlist(hourly_donnees[[2]]),\n    \"données de température ressentie\" = unlist(hourly_donnees[[3]]),\n    \"probabilité de pluie\" = unlist(hourly_donnees[[4]]),\n    \"precipitation en mm\" = unlist(hourly_donnees[[5]])\n  )\n  return(output_tibble)\n}\nresp2 &lt;- unnest_response(resp)\nresp2\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                      5.9                              3.2\n 2 2024-03-06 23:00:00                      5.4                              2.5\n 3 2024-03-06 23:00:00                      6.3                              2.9\n 4 2024-03-06 23:00:00                      5.7                              2.6\n 5 2024-03-06 23:00:00                      5.6                              2.3\n 6 2024-03-06 23:00:00                      4.8                              1.4\n 7 2024-03-06 23:00:00                      4.7                              0.9\n 8 2024-03-06 23:00:00                      4.7                              0.9\n 9 2024-03-06 23:00:00                      5.2                              1.1\n10 2024-03-06 23:00:00                      7.4                              2.6\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\n\n\n\n\n\n\n\n• créez un script de tests en utilisant la fonction usethis::use_test(“unnest_response”)\n• dans ce script, créez un jeu de données minimal pour tester le comportement de la fonction\n• testez la fonction, en proposant plusieurs tests unitaires. Exemple de tests unitaires:\n– testez que la fonction renvoie le bon nombre de lignes\n– testez que les valeurs de la colonne temperature correspondent aux valeur proposées en entrée\n– testez le nom des colonnes en sortie\n– testez le nombre de colonnes en sortie\n\nusethis::use_test(\"unnest_response\")\ntestthat::test_dir('tests/testthat/')\n\n\n\n\ntest_resp &lt;- list(\n  hourly = list(\n    heure = ymd_hms(\"2024-03-05 08:00:00\", tz = \"UTC\"),\n    temperature = c(10, 12, 14),\n    temperature_ressentie = c(8, 10, 12),\n    probabilite_pluie = c(0.1, 0.2, 0.3),\n    precipitation_mm = c(0, 0.5, 1)\n  )\n)\n\n\n\n\n\ntest_that(\"La fonction renvoie le bon nombre de lignes\", {\n  resp &lt;- unnest_response(test_resp)\n  expect_equal(nrow(resp), 3)\n})\n\nTest passed 🥇\n\n\n\n\n\n\ntest_that(\"Les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée\", {\n  resp &lt;- unnest_response(test_resp)\n  expect_equal(resp$`données de température`, c(10, 12, 14))\n})\n\nTest passed 😀\n\n\n\n\n\n\ntest_that(\"Le nom des colonnes en sortie est correct\", {\n  resp &lt;- unnest_response(test_resp)\n  expect_named(resp, c(\"heure au tz UTC\", \"données de température\", \"données de température ressentie\", \"probabilité de pluie\", \"precipitation en mm\"))\n})\n\nTest passed 🌈\n\n\n\n\n\n\ntest_that(\"Le nombre de colonnes en sortie est correct\", {\n  resp &lt;- unnest_response(test_resp)\n  expect_equal(ncol(resp), 5)\n})\n\nTest passed 🌈\n\n\nLa fonction “unnest_response” réussit tous les tests.\n\n\n\n\n\n\n\n\n• coordonnées GPS, i.e un vecteur numérique de taille 2\n\n• un nom de site olympique ou une adresse. A partir du code de la séance 1, définissez une fonction address_to_gps convertissant une adresse en coordonnées gps sous la forme d’un vecteur numérique de taille 2.\nDéfinir une fonction get_forecast générique, et deux implémentations get_forecast.character et get_forecast.numeric.\n\n#' Convertit une adresse en coordonnées GPS.\n#'\n#' @param adresse Adresse à géocoder\n#' @return Coordonnées GPS obtenues à partir de l'adresse\naddress_to_gps &lt;- function(adresse) {\n  df_adresse &lt;- data.frame(\"nom\" = character(), addr = character(), stringsAsFactors = FALSE)\n\n  df_adresse &lt;- rbind(df_adresse, data.frame(addr = adresse), stringsAsFactors = FALSE)\n\n  resultat_geocodage &lt;- df_adresse |&gt;\n    geocode(addr, method = 'arcgis')\n\n  df_adresse &lt;- resultat_geocodage\n\n  return(df_adresse)\n  print(df_adresse)\n}\n\nresultat10 &lt;- as_tibble(address_to_gps(\"Bâtiment Erdre, Chem. de la Censive du Tertre, 44300 Nantes\"))\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.6 seconds\n\nresultat10\n\n# A tibble: 1 × 3\n  addr                                                          lat  long\n  &lt;chr&gt;                                                       &lt;dbl&gt; &lt;dbl&gt;\n1 Bâtiment Erdre, Chem. de la Censive du Tertre, 44300 Nantes  47.2 -1.55\n\nlibrary(leaflet)\ncarte &lt;- leaflet()  |&gt; \n  addTiles()  |&gt; \n  addMarkers(lng = resultat10$long, lat = resultat10$lat, popup = \"IAE Nantes\")\ncarte\n\n\n\n\n\n\n\n\nget_forecast &lt;- function(location, ...) {\n  UseMethod(\"get_forecast\", location)\n}\n\n\n\n\n\nget_forecast.character &lt;- function(location, ...) {\n  coords &lt;- address_to_gps(location)\n  return(perform_request(coords[2], coords[1], ...))\n}\n\n\n\n\n\nget_forecast.numeric &lt;- function(location, ...) {\n  return(perform_request(location[2], location[1], ...))\n}\n\n\nPour valider l’exactitude des coordonnées de l’adresse renseignée, il convenait d’utiliser la fonction pour récupérer les coordonnées GPS associées à cette adresse. Ensuite, de visualier la cartographique qui affiche ces coordonnées sur une carte géographique. Cette visualisation a permis de vérifier visuellement si les coordonnées récupérées correspondent à l’emplacement attendu sur la carte.\n\n\n\n\n\n\n\n\n#' Obtient les coordonnées GPS à partir d'une adresse.\n#'\n#' @param adresse Adresse à géocoder\n#' @return Coordonnées GPS obtenues à partir de l'adresse\n#' @export\nget_gps_coordinate &lt;- function(adresse) {\n  resultat_geocodage &lt;- address_to_gps(adresse)\n\n  coordonnees &lt;- c(resultat_geocodage$lat, resultat_geocodage$long)\n\n  return(coordonnees)\n  print(coordonnees)\n}\n\nget_gps_coordinate(\"Bâtiment Erdre, Chem. de la Censive du Tertre, 44300 Nantes\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.1 seconds\n\n\n[1] 47.243140 -1.554258\n\n\nNotre fonction renvoie avec précision les coordonnées du lieu demandé.\n\n\n\n\n\n\n\n\n#' Obtient les prévisions météorologiques à partir de coordonnées GPS.\n#'\n#' @param xy Vecteur numérique avec x les latitudes et y les longitudes\n#' @return Un tibble 168x5\n#' @export\nget_forecast.numeric &lt;- function(xy, ...) {\n  if (!is.numeric(xy) || length(xy) != 2) {\n    stop(\"Erreur ! L'argument xy doit être un vecteur numérique de taille 2 !\")\n  }\n\n  response_table &lt;- perform_request(xy[2], xy[1], ...)\n\n  unnested_table &lt;- unnest_response(response_table)\n\n  return(unnested_table)\n}\n\nxy &lt;- c(47.243140, -1.554258)\nresultat12 &lt;- get_forecast.numeric(xy)\nresultat12\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                     28.3                             34.2\n 2 2024-03-06 23:00:00                     28.2                             34.3\n 3 2024-03-06 23:00:00                     28.2                             34.4\n 4 2024-03-06 23:00:00                     28.1                             34.5\n 5 2024-03-06 23:00:00                     28.1                             34.7\n 6 2024-03-06 23:00:00                     28                               34.3\n 7 2024-03-06 23:00:00                     28.1                             34.1\n 8 2024-03-06 23:00:00                     28                               34.4\n 9 2024-03-06 23:00:00                     28                               35.2\n10 2024-03-06 23:00:00                     28                               35  \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\n\n\nNotre fonction est efficace puisqu’elle signale correctement les erreurs lorsque le vecteur n’est ni numérique ni de taille 2, et récupère avec succès les données météorologiques pour les coordonnées fournies lorsqu’elles sont un vecteur numérique de taille 2.\n\n\n\n\n\n\n\n\n#' Prévisions météorologiques à partir d'une adresse.\n#'\n#' @param adresse Adresse à géocoder\n#' @return Les prévisions météorologiques obtenues\n#' @export\nforecast.character &lt;- function(adresse) {\n  if (!is.character(adresse) || length(adresse) != 1) {\n    stop(\"L'argument address doit être de type character et de taille 1.\")\n  }\n}\n\n#' Obtient les prévisions météorologiques à partir d'une adresse.\n#'\n#' @param adresse Adresse à géocoder\n#' @return Les prévisions météorologiques obtenues\n#' @export\nget_forecast.character &lt;- function(adresse) {\n  forecast.character(adresse)\n  \n  coordinates &lt;- get_gps_coordinate(adresse)\n  \n  resultat_previsions &lt;- perform_request(latitude = coordinates[1], longitude = coordinates[2])\n  resultat_traitement &lt;- unnest_response(resultat_previsions)\n  \n  return(resultat_traitement)\n}\n\nget_forecast.character(\"46, rue Proudhon, 93210, Saint-Denis, France\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.9 seconds\n\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                      4.7                              2.7\n 2 2024-03-06 23:00:00                      4.1                              1.7\n 3 2024-03-06 23:00:00                      3.7                              1.5\n 4 2024-03-06 23:00:00                      3                                0.7\n 5 2024-03-06 23:00:00                      2.7                              0.4\n 6 2024-03-06 23:00:00                      2.5                             -0.1\n 7 2024-03-06 23:00:00                      2.4                              0  \n 8 2024-03-06 23:00:00                      2.6                              0.1\n 9 2024-03-06 23:00:00                      3.7                              1.4\n10 2024-03-06 23:00:00                      6.6                              4.2\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\nget_forecast.numeric(c(47.243140, -1.554258))\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                     28.3                             34.2\n 2 2024-03-06 23:00:00                     28.2                             34.3\n 3 2024-03-06 23:00:00                     28.2                             34.4\n 4 2024-03-06 23:00:00                     28.1                             34.5\n 5 2024-03-06 23:00:00                     28.1                             34.7\n 6 2024-03-06 23:00:00                     28                               34.3\n 7 2024-03-06 23:00:00                     28.1                             34.1\n 8 2024-03-06 23:00:00                     28                               34.4\n 9 2024-03-06 23:00:00                     28                               35.2\n10 2024-03-06 23:00:00                     28                               35  \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\n\nLa fonction opère correctement.\n\n\n\n\n\n\n#' get_forecast\n#'\n#' Cette fonction générique permet d'obtenir des prévisions météorologiques en fonction d'une localisation.\n#' Elle a deux implémentations spécifiques :\n#'   - get_forecast.character : pour obtenir des prévisions à partir d'un nom de site olympique ou d'une adresse.\n#'   - get_forecast.numeric : pour obtenir des prévisions à partir des coordonnées GPS.\n#'\n#' @param location Emplacement pour obtenir les prévisions (Adresse, nom de site olympique ou coordonnées GPS).\n#'   - Pour get_forecast.character : un caractère de taille 1.\n#'   - Pour get_forecast.numeric : un vecteur numérique de taille 2 (latitude, longitude).\n#' @return Un tibble contenant les prévisions météorologiques.\n#' @examples\n#' Exemples d'utilisation :\n#' \\dontrun{\n#'   # Exemples d'utilisation\n#'   get_forecast(\"Nantes\")\n#'   get_forecast(c(48.85, 2.35))\n#' }\n#'\n#' @seealso\n#' \\code{\\link{get_forecast.character}}, \\code{\\link{get_forecast.numeric}},\n#' \\code{\\link{perform_request}}, \\code{\\link{unnest_response}}\n#'\n#' @export\nget_forecast &lt;- function(x) {\n  if (is.numeric(x)) {\n    get_forecast.numeric(x)\n  } else if (is.character(x)) {\n    get_forecast.character(x)\n  } else {\n    stop(\"L'argument doit être de type numeric (coordonnées) ou character (adresse).\")\n  }\n}\n\nresultat14 &lt;-get_forecast(\"District de Huairou, Chine, 101406\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.1 seconds\n\nprint(resultat14)\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                      1.4                             -2.2\n 2 2024-03-06 23:00:00                      3.3                             -0.3\n 3 2024-03-06 23:00:00                      5.4                              1.4\n 4 2024-03-06 23:00:00                      7.2                              3.4\n 5 2024-03-06 23:00:00                      9.1                              6.2\n 6 2024-03-06 23:00:00                     10.9                              7.9\n 7 2024-03-06 23:00:00                     10.9                              7.4\n 8 2024-03-06 23:00:00                     11.2                              6  \n 9 2024-03-06 23:00:00                     10.9                              5.5\n10 2024-03-06 23:00:00                     10.5                              5.5\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\nresultat14bis &lt;-get_forecast(c(47.243140, -1.554258))\nprint(resultat14bis)\n\n# A tibble: 168 × 5\n   `heure au tz UTC`   `données de température` données de température ressent…¹\n   &lt;dttm&gt;                                 &lt;dbl&gt;                            &lt;dbl&gt;\n 1 2024-03-06 23:00:00                     28.3                             34.2\n 2 2024-03-06 23:00:00                     28.2                             34.3\n 3 2024-03-06 23:00:00                     28.2                             34.4\n 4 2024-03-06 23:00:00                     28.1                             34.5\n 5 2024-03-06 23:00:00                     28.1                             34.7\n 6 2024-03-06 23:00:00                     28                               34.3\n 7 2024-03-06 23:00:00                     28.1                             34.1\n 8 2024-03-06 23:00:00                     28                               34.4\n 9 2024-03-06 23:00:00                     28                               35.2\n10 2024-03-06 23:00:00                     28                               35  \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​`données de température ressentie`\n# ℹ 2 more variables: `probabilité de pluie` &lt;int&gt;, `precipitation en mm` &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\nlibrary(olympicsWeather)\n\n\nAttaching package: 'olympicsWeather'\n\n\nThe following objects are masked _by_ '.GlobalEnv':\n\n    forecast.character, get_forecast, get_forecast.character,\n    get_forecast.numeric, get_gps_coordinate, perform_request,\n    unnest_response\n\nhelp(\"get_forecast\")\n\n\n\n\n\n\n\n\n#' Visualise les emplacements des prévisions météorologiques sur une carte Leaflet\n#'\n#' @param forecast_locations Un data frame contenant les emplacements des prévisions météorologiques avec au moins deux colonnes : long (longitude) et lat (latitude).\n#' @return Une carte Leaflet avec des marqueurs pour les emplacements des prévisions météorologiques.\n#' @export\nvisualiser_carte &lt;- function(forecast_locations) {\n  require(leaflet)\n  \n  ma_carte &lt;- leaflet() %&gt;%\n    addTiles() %&gt;%\n    addMarkers(lng = forecast_locations$long, lat = forecast_locations$lat)\n  \n  return(ma_carte)\n}\n\n\n#exemple d'utilisation \nexemple1 &lt;- data.frame(\n  long = c(-0.1278, -73.935242, 151.2093), \n  lat = c(51.5074, 40.730610, -33.8688)  \n)\nma_carte &lt;- visualiser_carte(exemple1)\nma_carte\n\n\n\n\n\n\n#' Visualise les prévisions météorologiques\n#'\n#' @param forecast_data Un data frame contenant les données de prévisions météorologiques avec au moins deux colonnes : date et température.\n#' @return Un objet ggplot représentant les prévisions météorologiques.\n#' @export\nvisualiser_previsions &lt;- function(forecast_data) {\n  require(ggplot2)\n  \n  ggplot(data = forecast_data, aes(x = date, y = temperature)) +\n    geom_line() +\n    labs(title = \"Prévision de la température\", x = \"Date\", y = \"Température (°C)\")\n}\n\n#exemple d'utilisation \nexemple2 &lt;- data.frame(\n  date = seq(as.Date(\"2022-01-01\"), by = \"day\", length.out = 7), \n  temperature = c(20, 22, 23, 25, 24, 23, 22) \n)\n\nmon_graph &lt;- visualiser_previsions(exemple2)\nprint(mon_graph)"
  },
  {
    "objectID": "posts/post-with-code/Exercice1.html",
    "href": "posts/post-with-code/Exercice1.html",
    "title": "Exercices - Semaine 1",
    "section": "",
    "text": "Vérifiez que les options globales de RStudio sont conformes aux options recommandées dans le cours.\nCréez un projet RStudio intitulé cours_r_semaine_1. Ce projet sera créé vide. Les options utilisation de renv et de git peuvent être ignorées.\n\n\n\n\n\n\n\nPour cet exercice, nous allons télécharger un jeu de données issu de https://data.gouv.fr sur les infrastructures olympiques des JO 2024 à Paris. Le jeu de données est disponible ici. L’objectif de cet exercice est d’utiliser uniquement des fonctions de R base. N’utilisez pas de librairie tierce sauf mention contraire.\n\n\n\n\n\n\n\n\n\n\ndata_ex &lt;- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/cours-r-avance/paris-2024-sites-olympiques-et-paralympiques-franciliens.csv\", sep=\";\")\n\n\ncolnames_data&lt;-colnames(data_ex)\ntypes_col&lt;-sapply(data_ex, class)\n\n\n\n\n\nmessage(\"Noms des colonnes : \", paste(colnames_data, collapse = \", \"))\n\nNoms des colonnes : geo_point, nom, sites_olympiques_paralympiques, sports\n\nmessage(\"Nature des colonnes : \", paste(types_col, collapse = \", \"))\n\nNature des colonnes : character, character, character, character\n\nmessage(\"Nombre de lignes : \", nrow(data_ex))\n\nNombre de lignes : 31\n\ndim(data_ex)\n\n[1] 31  4\n\n\nLe jeu de données “Paris 2024” comporte 31 lignes et 4 colonnes de type caractère qui portent les noms suivants :\n\ngeo_point\nnom\nsites_olympiques\nsports\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\n\n\nnb_sites_olympiques &lt;- sum(data_ex$sites_olympiques_paralympiques==\"Site olympique\")\nnb_sites_olympiques\n\n[1] 10\n\nmessage(\"Nombre de sites olympiques : \", nb_sites_olympiques)\n\nNombre de sites olympiques : 10\n\n\nLe jeu de données comporte 10 sites olympiques.\n\n\n\n\n\n\n\nnb_sites_paralympiques &lt;- sum(data_ex$sites_olympiques_paralympiques==\"Site paralympique\")\nnb_sites_paralympiques\n\n[1] 3\n\nmessage(\"Nombre de sites paralympiques : \", nb_sites_paralympiques)\n\nNombre de sites paralympiques : 3\n\nnb_sites_olympiques_paralympiques &lt;- sum(data_ex$sites_olympiques_paralympiques == \"Site olympique,Site paralympique\", na.rm = TRUE)\nnb_sites_olympiques_paralympiques\n\n[1] 16\n\nmessage(\"Nombre de sites olympiques et paralympiques : \", nb_sites_olympiques_paralympiques)\n\nNombre de sites olympiques et paralympiques : 16\n\n\nLe jeu de données comporte 3 sites paralympiques.\nDe plus, il comporte 16 sites qui sont à la fois olympiques et paralympiques.\n\n\n\n\n\n\n\n\n\nplusieurs_sports &lt;- data_ex |&gt;\n  filter(str_detect(sports, \",\"))\nprint(plusieurs_sports$nom)\n\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n\n\n\n\n\n\nplusieurs_sports2 &lt;- data_ex[grepl(\",\", data_ex$sports), ]\nprint(plusieurs_sports2$nom)\n\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n\n\n\n\n\n\ndata_ex$nb_sports &lt;- strsplit(as.character(data_ex$sports), \",\")\nplusieurs_sports3 &lt;- data_ex[sapply(data_ex$nb_sports, length) &gt; 1, ]\nprint(plusieurs_sports3$nom)\n\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n\n\nLes trois méthodes nous permettent de considérer qu’il y a 19 qui accueillent plusieurs disciplines sportives. Ces derniers sont cités ci-dessus.\n\n\n\n\n\n\n\n\nsites_para &lt;- data_ex[data_ex$sites_olympiques_paralympiques == \"Site paralympique\",]\nsites_para$sports \n\n[1] \"Para cyclisme sur route\" \"Goalball\"               \n[3] \"Para athlétisme\"        \n\n\nLes disciplines ci-dessus sont celles accueillis par les sites para-olympiques.\n\nsites_para_olym &lt;- data_ex[data_ex$sites_olympiques_paralympiques == \"Site olympique,Site paralympique\",]\nsites_para_olym$sports\n\n [1] \"Athlétisme,Para athlétisme,Rugby\"                                \n [2] \"Cyclisme sur piste,Para cyclisme sur piste\"                      \n [3] \"Tennis,Tennis fauteuil,Boxe\"                                     \n [4] \"Tennis de table,Para tennis de table\"                            \n [5] \"Basketball,Basket fauteuil,Gymnastique artistique,trampoline\"    \n [6] \"Boxe,Escrime,Pentathlon moderne,Volley-ball assis\"               \n [7] \"Haltérophilie,Handball,Goalball\"                                 \n [8] \"Judo,Para judo,Lutte,Rugby fauteuil\"                             \n [9] \"Natation,Para natation,Water-polo\"                               \n[10] \"Canoë,Para canoë,Aviron,Para aviron\"                             \n[11] \"Volleyball,Boccia\"                                               \n[12] \"Volleyball de plage,Cécifoot\"                                    \n[13] \"Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\"\n[14] \"Sports équestres,Para équitation,Pentathlon moderne\"             \n[15] \"Escrime,Escrime fauteuil,Taekwondo,Para taekwondo\"               \n[16] \"Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\"      \n\n\nLes sites ci-dessus sont ceux qui accueillent les disciplines para-olympiques.\n\n\n\n\n\n\n\nplusieurs_sports3$nb_sports\n\n\nplusieurs_sports3$nom \n\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n\n\nLes sites suivant accueillent au moins quatre disciplines différentes :\n\nArena Bercy [6]\nArena Paris nord [7]\nStade de la Concorde [9]\nArena Champs de Mars [10]\nStade nautique [12]\nArena La Chapelle [15]\nGrand Palais [18]\nInvalides [19]\n\nCe sont les sites qui accueillent le plus de disciplines différentes.\n\n\n\n\n\n\n\n\n\ndata_ex &lt;- data_ex |&gt; \n  mutate(sports_list = strsplit(as.character(sports), \",\"))\n\ndisciplines_long &lt;- data_ex |&gt; \n  select(nom, sports_list) |&gt; \n  unnest(sports_list)\n\nnombre_sites_par_discipline &lt;- disciplines_long |&gt; \n  group_by(sports_list) |&gt; \n  summarise(nombre_sites = n_distinct(nom)) |&gt; \n  arrange(desc(nombre_sites))\n\ndiscipline_max_sites &lt;- nombre_sites_par_discipline[which.max(nombre_sites_par_discipline$nombre_sites), ]\n\nsites_pour_discipline &lt;- disciplines_long |&gt; \n  filter(sports_list == discipline_max_sites$sports_list) |&gt; \n  select(nom) |&gt; \n  distinct()\n\ndiscipline_max_sites$sports_list\n\n[1] \"Athlétisme\"\n\nsites_pour_discipline\n\n# A tibble: 4 × 1\n  nom                    \n  &lt;chr&gt;                  \n1 Stade de France        \n2 Hôtel de ville de Paris\n3 Pont d'Iéna            \n4 Invalides              \n\n\n\nmessage(\"Discipline avec le plus grand nombre de sites :\", discipline_max_sites$sports_list)\n\nDiscipline avec le plus grand nombre de sites :Athlétisme\n\nmessage(\"Sites où cette discipline aura lieu :\", sites_pour_discipline)\n\nSites où cette discipline aura lieu :c(\"Stade de France\", \"Hôtel de ville de Paris\", \"Pont d'Iéna\", \"Invalides\")\n\n\n\n\n\n\ndiscipline_max_sites2 &lt;- names(which.max(table(unlist(strsplit(data_ex$sports, \",\")))))\nsites_pour_discipline2 &lt;- data_ex$nom[sapply(data_ex$sports, function(x) discipline_max_sites2 %in% unlist(strsplit(x, \",\")))]\n\n\nmessage(\"Discipline ayant lieu sur le plus grand nombre de sites : \", discipline_max_sites2)\n\nDiscipline ayant lieu sur le plus grand nombre de sites : Athlétisme\n\nmessage(\"Sites où la discipline a lieu : \", paste(sites_pour_discipline2, collapse = \", \"))\n\nSites où la discipline a lieu : Stade de France, Hôtel de ville de Paris, Pont d'Iéna, Invalides\n\n\nL’Athlétisme est la discipline qui aura lieu sur le plus grand nombre de sites. Cette dernière aura lieu sur les sites suivants :\n\nStade de France\nHôtel de ville de Paris\nPont d’Iéna\nInvalides\n\n\n\n\n\n\n\n\n\nlibrary(geosphere)\nlibrary(dplyr)\n\ncoordonnees_donnees &lt;- data.frame(do.call('rbind', strsplit(as.character(data_ex$geo_point), ',')))\n\ncolnames(coordonnees_donnees) &lt;- c(\"latitude\", \"longitude\")\n\ndata_ex &lt;- cbind(data_ex, coordonnees_donnees)\n#str(data_ex)\n\ndata_ex$longitude &lt;- as.numeric(data_ex$longitude)\ndata_ex$latitude &lt;- as.numeric(data_ex$latitude)\n\ncoordonnees &lt;- data_ex[, c(\"latitude\", \"longitude\")]\nnoms_sites &lt;- data_ex$nom\n\n\nsite1 &lt;- NULL\nsite2 &lt;- NULL\ndistance_min &lt;- Inf\n\nfor (i in 1:(nrow(coordonnees) - 1)) {\n  for (j in (i + 1):nrow(coordonnees)) {\n    nom_site_i &lt;- tolower(trimws(noms_sites[i]))\n    nom_site_j &lt;- tolower(trimws(noms_sites[j]))\n        distance &lt;- distHaversine(coordonnees[c(i, j), , drop = FALSE])\n    \n    cat(\"Distance entre\", nom_site_i, \"et\", nom_site_j, \":\", distance, \"mètres\\n\")\n    \n    if (distance &lt; distance_min) {\n      distance_min &lt;- distance\n      site1 &lt;- nom_site_i\n      site2 &lt;- nom_site_j\n      \n      cat(\"Nouvelle paire trouvée :\", site1, \"et\", site2, \"avec distance :\", distance_min, \"mètres\\n\")\n    }\n  }\n}\n\n\nif (!is.null(site1) && !is.null(site2)) {\n  cat(\"Les deux sites les plus proches sont :\", site1, \"et\", site2, \"\\n\")\n  cat(\"La distance entre ces deux sites est de :\", distance_min, \"mètres\\n\")\n} else {\n  cat(\"Aucun résultat n'a été trouvé, vérifiez vos données.\\n\")\n}\n\nLes deux sites les plus proches sont : vélodrome national de saint-quentin-en-yvelines et stade bmx de saint-quentin-en-yvelines \nLa distance entre ces deux sites est de : 91.69166 mètres\n\n\nLes deux sites les plus proches sont le Vélodrome National et le Stade BMX, situés à Saint-Quentin-en-Yvelines, à une distance de 91,69 mètres l’un de l’autre.\n\n\n\n\n\n\n\nsite1bis &lt;- NULL\nsite2bis &lt;- NULL\ndistance_max &lt;- 0\n\n\nfor (x in 1:(nrow(coordonnees) - 1)) {\n  for (y in (x + 1):nrow(coordonnees)) {\n    nom_site_x &lt;- tolower(trimws(noms_sites[x]))\n    nom_site_y &lt;- tolower(trimws(noms_sites[y]))\n    \n    distance &lt;- distHaversine(coordonnees[c(x, y), , drop = FALSE])\n    \n    cat(\"Distance entre\", nom_site_x, \"et\", nom_site_y, \":\", distance, \"mètres\\n\")\n    \n    if (distance &gt; distance_max) {\n      distance_max &lt;- distance\n      site1bis &lt;- nom_site_x\n      site2bis &lt;- nom_site_y\n      \n      cat(\"Nouvelle paire trouvée :\", site1bis, \"et\", site2bis, \"avec distance :\", distance_max, \"mètres\\n\")\n    }\n  }\n}\n\n\nif (!is.null(site1bis) && !is.null(site2bis)) {\n  cat(\"Les deux sites les plus éloignés sont :\", site1bis, \"et\", site2bis, \"\\n\")\n  cat(\"La distance entre ces deux sites est de :\", distance_max, \"mètres\\n\")\n} else {\n  cat(\"Aucun résultat n'a été trouvé, vérifiez vos données.\\n\")\n}\n\nLes deux sites les plus éloignés sont : stade nautique et colline d'elancourt \nLa distance entre ces deux sites est de : 74882.55 mètres\n\n\nLa distance la plus grande entre deux sites est de 74 882 mètres, soit plus de 74 kilomètres, séparant le Stade Nautique de la Colline d’Elancourt.\n\n\n\n\n\n\n\n\n\n\nbarycentre_coords &lt;- c(mean(coordonnees$latitude), mean(coordonnees$longitude))\ncat(\"Coordonnées du barycentre :\", barycentre_coords, \"\\n\")\n\nCoordonnées du barycentre : 48.86684 2.29757 \n\n\n\nlongitude_moy &lt;- mean(coordonnees$longitude)\nlongitude_moy\n\n[1] 2.29757\n\nlatitude_moy &lt;- mean(coordonnees$latitude)\nlatitude_moy\n\n[1] 48.86684\n\n\n\n\n\n\ndistances_barycentre &lt;- distVincentySphere(cbind(longitude_moy, latitude_moy), cbind(coordonnees$longitude, coordonnees$latitude))\ndistances_barycentre\n\n [1]  4323.687  7862.824 20739.321 21148.226  4389.397 18869.723  4122.346\n [8]  4097.018  1261.606  6707.325 19951.185  4173.022  1736.402  7937.682\n[15]  1385.795  5913.431 24816.143  3994.479  1075.459 21201.467  5942.345\n[22]  4595.202  7596.662  6924.304 16805.211 12677.560 11857.549 25706.961\n[29]  1090.104  1253.492 11924.600\n\n\n\n\n\n\nindice_site_plus_proche &lt;- which.min(distances_barycentre)\nindice_site_plus_proche\n\n[1] 19\n\n\nCet appartement semble se situer proche de l’indice 19, à savoir, proche du Stade Tour Eiffel."
  },
  {
    "objectID": "posts/post-with-code/Exercice1.html#exercices---semaine-1",
    "href": "posts/post-with-code/Exercice1.html#exercices---semaine-1",
    "title": "Exercices - Semaine 1",
    "section": "",
    "text": "Vérifiez que les options globales de RStudio sont conformes aux options recommandées dans le cours.\nCréez un projet RStudio intitulé cours_r_semaine_1. Ce projet sera créé vide. Les options utilisation de renv et de git peuvent être ignorées.\n\n\n\n\n\n\n\nPour cet exercice, nous allons télécharger un jeu de données issu de https://data.gouv.fr sur les infrastructures olympiques des JO 2024 à Paris. Le jeu de données est disponible ici. L’objectif de cet exercice est d’utiliser uniquement des fonctions de R base. N’utilisez pas de librairie tierce sauf mention contraire.\n\n\n\n\n\n\n\n\n\n\ndata_ex &lt;- read.csv(\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/cours-r-avance/paris-2024-sites-olympiques-et-paralympiques-franciliens.csv\", sep=\";\")\n\n\ncolnames_data&lt;-colnames(data_ex)\ntypes_col&lt;-sapply(data_ex, class)\n\n\n\n\n\nmessage(\"Noms des colonnes : \", paste(colnames_data, collapse = \", \"))\n\nNoms des colonnes : geo_point, nom, sites_olympiques_paralympiques, sports\n\nmessage(\"Nature des colonnes : \", paste(types_col, collapse = \", \"))\n\nNature des colonnes : character, character, character, character\n\nmessage(\"Nombre de lignes : \", nrow(data_ex))\n\nNombre de lignes : 31\n\ndim(data_ex)\n\n[1] 31  4\n\n\nLe jeu de données “Paris 2024” comporte 31 lignes et 4 colonnes de type caractère qui portent les noms suivants :\n\ngeo_point\nnom\nsites_olympiques\nsports\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\n\n\nnb_sites_olympiques &lt;- sum(data_ex$sites_olympiques_paralympiques==\"Site olympique\")\nnb_sites_olympiques\n\n[1] 10\n\nmessage(\"Nombre de sites olympiques : \", nb_sites_olympiques)\n\nNombre de sites olympiques : 10\n\n\nLe jeu de données comporte 10 sites olympiques.\n\n\n\n\n\n\n\nnb_sites_paralympiques &lt;- sum(data_ex$sites_olympiques_paralympiques==\"Site paralympique\")\nnb_sites_paralympiques\n\n[1] 3\n\nmessage(\"Nombre de sites paralympiques : \", nb_sites_paralympiques)\n\nNombre de sites paralympiques : 3\n\nnb_sites_olympiques_paralympiques &lt;- sum(data_ex$sites_olympiques_paralympiques == \"Site olympique,Site paralympique\", na.rm = TRUE)\nnb_sites_olympiques_paralympiques\n\n[1] 16\n\nmessage(\"Nombre de sites olympiques et paralympiques : \", nb_sites_olympiques_paralympiques)\n\nNombre de sites olympiques et paralympiques : 16\n\n\nLe jeu de données comporte 3 sites paralympiques.\nDe plus, il comporte 16 sites qui sont à la fois olympiques et paralympiques.\n\n\n\n\n\n\n\n\n\nplusieurs_sports &lt;- data_ex |&gt;\n  filter(str_detect(sports, \",\"))\nprint(plusieurs_sports$nom)\n\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n\n\n\n\n\n\nplusieurs_sports2 &lt;- data_ex[grepl(\",\", data_ex$sports), ]\nprint(plusieurs_sports2$nom)\n\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n\n\n\n\n\n\ndata_ex$nb_sports &lt;- strsplit(as.character(data_ex$sports), \",\")\nplusieurs_sports3 &lt;- data_ex[sapply(data_ex$nb_sports, length) &gt; 1, ]\nprint(plusieurs_sports3$nom)\n\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n\n\nLes trois méthodes nous permettent de considérer qu’il y a 19 qui accueillent plusieurs disciplines sportives. Ces derniers sont cités ci-dessus.\n\n\n\n\n\n\n\n\nsites_para &lt;- data_ex[data_ex$sites_olympiques_paralympiques == \"Site paralympique\",]\nsites_para$sports \n\n[1] \"Para cyclisme sur route\" \"Goalball\"               \n[3] \"Para athlétisme\"        \n\n\nLes disciplines ci-dessus sont celles accueillis par les sites para-olympiques.\n\nsites_para_olym &lt;- data_ex[data_ex$sites_olympiques_paralympiques == \"Site olympique,Site paralympique\",]\nsites_para_olym$sports\n\n [1] \"Athlétisme,Para athlétisme,Rugby\"                                \n [2] \"Cyclisme sur piste,Para cyclisme sur piste\"                      \n [3] \"Tennis,Tennis fauteuil,Boxe\"                                     \n [4] \"Tennis de table,Para tennis de table\"                            \n [5] \"Basketball,Basket fauteuil,Gymnastique artistique,trampoline\"    \n [6] \"Boxe,Escrime,Pentathlon moderne,Volley-ball assis\"               \n [7] \"Haltérophilie,Handball,Goalball\"                                 \n [8] \"Judo,Para judo,Lutte,Rugby fauteuil\"                             \n [9] \"Natation,Para natation,Water-polo\"                               \n[10] \"Canoë,Para canoë,Aviron,Para aviron\"                             \n[11] \"Volleyball,Boccia\"                                               \n[12] \"Volleyball de plage,Cécifoot\"                                    \n[13] \"Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\"\n[14] \"Sports équestres,Para équitation,Pentathlon moderne\"             \n[15] \"Escrime,Escrime fauteuil,Taekwondo,Para taekwondo\"               \n[16] \"Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\"      \n\n\nLes sites ci-dessus sont ceux qui accueillent les disciplines para-olympiques.\n\n\n\n\n\n\n\nplusieurs_sports3$nb_sports\n\n\nplusieurs_sports3$nom \n\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n\n\nLes sites suivant accueillent au moins quatre disciplines différentes :\n\nArena Bercy [6]\nArena Paris nord [7]\nStade de la Concorde [9]\nArena Champs de Mars [10]\nStade nautique [12]\nArena La Chapelle [15]\nGrand Palais [18]\nInvalides [19]\n\nCe sont les sites qui accueillent le plus de disciplines différentes.\n\n\n\n\n\n\n\n\n\ndata_ex &lt;- data_ex |&gt; \n  mutate(sports_list = strsplit(as.character(sports), \",\"))\n\ndisciplines_long &lt;- data_ex |&gt; \n  select(nom, sports_list) |&gt; \n  unnest(sports_list)\n\nnombre_sites_par_discipline &lt;- disciplines_long |&gt; \n  group_by(sports_list) |&gt; \n  summarise(nombre_sites = n_distinct(nom)) |&gt; \n  arrange(desc(nombre_sites))\n\ndiscipline_max_sites &lt;- nombre_sites_par_discipline[which.max(nombre_sites_par_discipline$nombre_sites), ]\n\nsites_pour_discipline &lt;- disciplines_long |&gt; \n  filter(sports_list == discipline_max_sites$sports_list) |&gt; \n  select(nom) |&gt; \n  distinct()\n\ndiscipline_max_sites$sports_list\n\n[1] \"Athlétisme\"\n\nsites_pour_discipline\n\n# A tibble: 4 × 1\n  nom                    \n  &lt;chr&gt;                  \n1 Stade de France        \n2 Hôtel de ville de Paris\n3 Pont d'Iéna            \n4 Invalides              \n\n\n\nmessage(\"Discipline avec le plus grand nombre de sites :\", discipline_max_sites$sports_list)\n\nDiscipline avec le plus grand nombre de sites :Athlétisme\n\nmessage(\"Sites où cette discipline aura lieu :\", sites_pour_discipline)\n\nSites où cette discipline aura lieu :c(\"Stade de France\", \"Hôtel de ville de Paris\", \"Pont d'Iéna\", \"Invalides\")\n\n\n\n\n\n\ndiscipline_max_sites2 &lt;- names(which.max(table(unlist(strsplit(data_ex$sports, \",\")))))\nsites_pour_discipline2 &lt;- data_ex$nom[sapply(data_ex$sports, function(x) discipline_max_sites2 %in% unlist(strsplit(x, \",\")))]\n\n\nmessage(\"Discipline ayant lieu sur le plus grand nombre de sites : \", discipline_max_sites2)\n\nDiscipline ayant lieu sur le plus grand nombre de sites : Athlétisme\n\nmessage(\"Sites où la discipline a lieu : \", paste(sites_pour_discipline2, collapse = \", \"))\n\nSites où la discipline a lieu : Stade de France, Hôtel de ville de Paris, Pont d'Iéna, Invalides\n\n\nL’Athlétisme est la discipline qui aura lieu sur le plus grand nombre de sites. Cette dernière aura lieu sur les sites suivants :\n\nStade de France\nHôtel de ville de Paris\nPont d’Iéna\nInvalides\n\n\n\n\n\n\n\n\n\nlibrary(geosphere)\nlibrary(dplyr)\n\ncoordonnees_donnees &lt;- data.frame(do.call('rbind', strsplit(as.character(data_ex$geo_point), ',')))\n\ncolnames(coordonnees_donnees) &lt;- c(\"latitude\", \"longitude\")\n\ndata_ex &lt;- cbind(data_ex, coordonnees_donnees)\n#str(data_ex)\n\ndata_ex$longitude &lt;- as.numeric(data_ex$longitude)\ndata_ex$latitude &lt;- as.numeric(data_ex$latitude)\n\ncoordonnees &lt;- data_ex[, c(\"latitude\", \"longitude\")]\nnoms_sites &lt;- data_ex$nom\n\n\nsite1 &lt;- NULL\nsite2 &lt;- NULL\ndistance_min &lt;- Inf\n\nfor (i in 1:(nrow(coordonnees) - 1)) {\n  for (j in (i + 1):nrow(coordonnees)) {\n    nom_site_i &lt;- tolower(trimws(noms_sites[i]))\n    nom_site_j &lt;- tolower(trimws(noms_sites[j]))\n        distance &lt;- distHaversine(coordonnees[c(i, j), , drop = FALSE])\n    \n    cat(\"Distance entre\", nom_site_i, \"et\", nom_site_j, \":\", distance, \"mètres\\n\")\n    \n    if (distance &lt; distance_min) {\n      distance_min &lt;- distance\n      site1 &lt;- nom_site_i\n      site2 &lt;- nom_site_j\n      \n      cat(\"Nouvelle paire trouvée :\", site1, \"et\", site2, \"avec distance :\", distance_min, \"mètres\\n\")\n    }\n  }\n}\n\n\nif (!is.null(site1) && !is.null(site2)) {\n  cat(\"Les deux sites les plus proches sont :\", site1, \"et\", site2, \"\\n\")\n  cat(\"La distance entre ces deux sites est de :\", distance_min, \"mètres\\n\")\n} else {\n  cat(\"Aucun résultat n'a été trouvé, vérifiez vos données.\\n\")\n}\n\nLes deux sites les plus proches sont : vélodrome national de saint-quentin-en-yvelines et stade bmx de saint-quentin-en-yvelines \nLa distance entre ces deux sites est de : 91.69166 mètres\n\n\nLes deux sites les plus proches sont le Vélodrome National et le Stade BMX, situés à Saint-Quentin-en-Yvelines, à une distance de 91,69 mètres l’un de l’autre.\n\n\n\n\n\n\n\nsite1bis &lt;- NULL\nsite2bis &lt;- NULL\ndistance_max &lt;- 0\n\n\nfor (x in 1:(nrow(coordonnees) - 1)) {\n  for (y in (x + 1):nrow(coordonnees)) {\n    nom_site_x &lt;- tolower(trimws(noms_sites[x]))\n    nom_site_y &lt;- tolower(trimws(noms_sites[y]))\n    \n    distance &lt;- distHaversine(coordonnees[c(x, y), , drop = FALSE])\n    \n    cat(\"Distance entre\", nom_site_x, \"et\", nom_site_y, \":\", distance, \"mètres\\n\")\n    \n    if (distance &gt; distance_max) {\n      distance_max &lt;- distance\n      site1bis &lt;- nom_site_x\n      site2bis &lt;- nom_site_y\n      \n      cat(\"Nouvelle paire trouvée :\", site1bis, \"et\", site2bis, \"avec distance :\", distance_max, \"mètres\\n\")\n    }\n  }\n}\n\n\nif (!is.null(site1bis) && !is.null(site2bis)) {\n  cat(\"Les deux sites les plus éloignés sont :\", site1bis, \"et\", site2bis, \"\\n\")\n  cat(\"La distance entre ces deux sites est de :\", distance_max, \"mètres\\n\")\n} else {\n  cat(\"Aucun résultat n'a été trouvé, vérifiez vos données.\\n\")\n}\n\nLes deux sites les plus éloignés sont : stade nautique et colline d'elancourt \nLa distance entre ces deux sites est de : 74882.55 mètres\n\n\nLa distance la plus grande entre deux sites est de 74 882 mètres, soit plus de 74 kilomètres, séparant le Stade Nautique de la Colline d’Elancourt.\n\n\n\n\n\n\n\n\n\n\nbarycentre_coords &lt;- c(mean(coordonnees$latitude), mean(coordonnees$longitude))\ncat(\"Coordonnées du barycentre :\", barycentre_coords, \"\\n\")\n\nCoordonnées du barycentre : 48.86684 2.29757 \n\n\n\nlongitude_moy &lt;- mean(coordonnees$longitude)\nlongitude_moy\n\n[1] 2.29757\n\nlatitude_moy &lt;- mean(coordonnees$latitude)\nlatitude_moy\n\n[1] 48.86684\n\n\n\n\n\n\ndistances_barycentre &lt;- distVincentySphere(cbind(longitude_moy, latitude_moy), cbind(coordonnees$longitude, coordonnees$latitude))\ndistances_barycentre\n\n [1]  4323.687  7862.824 20739.321 21148.226  4389.397 18869.723  4122.346\n [8]  4097.018  1261.606  6707.325 19951.185  4173.022  1736.402  7937.682\n[15]  1385.795  5913.431 24816.143  3994.479  1075.459 21201.467  5942.345\n[22]  4595.202  7596.662  6924.304 16805.211 12677.560 11857.549 25706.961\n[29]  1090.104  1253.492 11924.600\n\n\n\n\n\n\nindice_site_plus_proche &lt;- which.min(distances_barycentre)\nindice_site_plus_proche\n\n[1] 19\n\n\nCet appartement semble se situer proche de l’indice 19, à savoir, proche du Stade Tour Eiffel."
  },
  {
    "objectID": "posts/post-with-code/Exercice2.html",
    "href": "posts/post-with-code/Exercice2.html",
    "title": "Exercices - Semaine 2",
    "section": "",
    "text": "Démarrez un nouveau projet rstudio intitulé TP2. Installez la library rvest en utilisant la commande install.packages(“rvest”). Cette librairie sera utilisée pour lire des tables de données directement depuis le web. De même, installez le package purrr.\n\n\n#install.packages(c(\"rvest\", \"dplyr\", \"purrr\"))\nlibrary(readr)\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(stringr)\n\n\n\n\n\n\n\n\n\nlist_tables &lt;- session(“https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques”)) |&gt; html_elements(”.wikitable”) |&gt; html_table()\nQue s’est-il passé ? Que contient l’objet list_tables ?\n\nlist_tables &lt;-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\n  html_elements(\".wikitable\") |&gt;\n  html_table()\n\nlist_tables # A tibble: 24 × 11\n\n[[1]]\n# A tibble: 31 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;               \n 1 \"Discipline\" Discipline   Années Éditions    Épreuves(e… Or                  \n 2 \"\"           Athlétisme   Depui… 29          48          1028                \n 3 \"\"           Aviron       Depui… 28          14          269                 \n 4 \"\"           Badminton    Depui… 8           5           39                  \n 5 \"\"           Basket-ball  Depui… 20          4           32                  \n 6 \"\"           Boxe         1904,… 26          13          266                 \n 7 \"\"           Canoë-kayak  Depui… 20          16          242                 \n 8 \"\"           Cyclisme(ho… Depui… 29          22          263                 \n 9 \"\"           Équitation   1900,… 26          6           151                 \n10 \"\"           Escrime      Depui… 29          12          223                 \n# ℹ 21 more rows\n# ℹ 5 more variables: `médailles décernés` &lt;chr&gt;, `médailles décernés` &lt;chr&gt;,\n#   `médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\n[[2]]\n# A tibble: 16 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;               \n 1 \"Discipline\" Discipline   Années Éditions    épreuves e… Or                  \n 2 \"\"           Biathlon     1924,… 16          11          54                  \n 3 \"\"           Bobsleigh    1924-… 21          3           39                  \n 4 \"\"           Combiné nor… Depui… 22          3           28                  \n 5 \"\"           Curling      1924,… 4           2           7                   \n 6 \"\"           Hockey sur … Été :… 23          2           24                  \n 7 \"\"           Luge         Depui… 14          4           37                  \n 8 \"\"           Patinage ar… Été :… 24          4           77                  \n 9 \"\"           Patinage de… Depui… 22          12          152                 \n10 \"\"           Patinage de… Depui… 7           8           32                  \n11 \"\"           Saut à ski   Depui… 22          4           38                  \n12 \"\"           Skeleton     1924,… 6           2           6                   \n13 \"\"           Ski acrobat… Depui… 7           10          18                  \n14 \"\"           Ski alpin    Depui… 19          10          132                 \n15 \"\"           Ski de fond  Depui… 22          12          134                 \n16 \"\"           Snowboard    Depui… 5           10          14                  \n# ℹ 5 more variables: `médailles décernés` &lt;chr&gt;, `médailles décernés` &lt;chr&gt;,\n#   `médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\n[[3]]\n# A tibble: 14 × 8\n   Discipline   Discipline       Années `Nombre d'éditions` `Médailles décernés`\n   &lt;chr&gt;        &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;               &lt;chr&gt;               \n 1 \"Discipline\" Discipline       Années Nombre d'éditions   Or                  \n 2 \"\"           Baseball         1992–… 5                   5                   \n 3 \"\"           Pelote basque    1900   1                   1                   \n 4 \"\"           Cricket          1900   1                   1                   \n 5 \"\"           Croquet          1900   1                   3                   \n 6 \"\"           Jeu de paume     1908   1                   1                   \n 7 \"\"           Crosse           1904–… 2                   2                   \n 8 \"\"           Polo             1900,… 5                   5                   \n 9 \"\"           Jeu de raquettes 1908   1                   2                   \n10 \"\"           Roque            1904   1                   1                   \n11 \"\"           Rugby à XV       1900,… 4                   4                   \n12 \"\"           Softball         1996–… 4                   4                   \n13 \"\"           Tir à la corde   1900–… 5                   5                   \n14 \"\"           Motonautisme     1908   5                   3                   \n# ℹ 3 more variables: `Médailles décernés` &lt;chr&gt;, `Médailles décernés` &lt;chr&gt;,\n#   `Médailles décernés` &lt;chr&gt;\n\n[[4]]\n# A tibble: 2 × 8\n  Discipline   Discipline        Années `Nombre d'éditions` `Médailles décernés`\n  &lt;chr&gt;        &lt;chr&gt;             &lt;chr&gt;  &lt;chr&gt;               &lt;chr&gt;               \n1 \"Discipline\" Discipline        Années Nombre d'éditions   Or                  \n2 \"\"           Patrouille milit… 1924   1                   1                   \n# ℹ 3 more variables: `Médailles décernés` &lt;chr&gt;, `Médailles décernés` &lt;chr&gt;,\n#   `Médailles décernés` &lt;chr&gt;\n\n[[5]]\n# A tibble: 30 × 11\n   Jeux  Médaille  Médaille Hôte     Nombred'épreuves(ave…¹ `Médailles décernés`\n   &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;                  &lt;chr&gt;               \n 1 Jeux  Médaille  Médaille Hôte     Nombred'épreuves(avec… Or                  \n 2 1896  médaillés tableau  Athènes… 43                     43                  \n 3 1900  médaillés tableau  Paris, … 95                     90                  \n 4 1904  médaillés tableau  Saint-L… 91                     96                  \n 5 1908  médaillés tableau  Londres… 110                    110                 \n 6 1912  médaillés tableau  Stockho… 102                    103                 \n 7 1920  médaillés tableau  Anvers,… 154                    156                 \n 8 1924  médaillés tableau  Paris, … 126                    126                 \n 9 1928  médaillés tableau  Amsterd… 109                    111                 \n10 1932  médaillés tableau  Los Ang… 117                    116                 \n# ℹ 20 more rows\n# ℹ abbreviated name: ¹​`Nombred'épreuves(avec médailles)`\n# ℹ 5 more variables: `Médailles décernés` &lt;chr&gt;, `Médailles décernés` &lt;chr&gt;,\n#   `Médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\n[[6]]\n# A tibble: 24 × 11\n   Jeux  Médaille  Médaille Hôte     Nombred'épreuves(ave…¹ `Médailles décernés`\n   &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;                  &lt;chr&gt;               \n 1 Jeux  Médaille  Médaille Hôte     Nombred'épreuves(avec… Or                  \n 2 1924  médaillés tableau  Chamoni… 16                     16                  \n 3 1928  médaillés tableau  Saint-M… 14                     14                  \n 4 1932  médaillés tableau  Lake Pl… 14                     14                  \n 5 1936  médaillés tableau  Garmisc… 17                     17                  \n 6 1948  médaillés tableau  Saint-M… 22                     22                  \n 7 1952  médaillés tableau  Oslo, N… 22                     22                  \n 8 1956  médaillés tableau  Cortina… 24                     25                  \n 9 1960  médaillés tableau  Squaw V… 27                     28                  \n10 1964  médaillés tableau  Innsbru… 34                     34                  \n# ℹ 14 more rows\n# ℹ abbreviated name: ¹​`Nombred'épreuves(avec médailles)`\n# ℹ 5 more variables: `Médailles décernés` &lt;chr&gt;, `Médailles décernés` &lt;chr&gt;,\n#   `Médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\nView(list_tables[[1]])\n\nLe code a réussi à extraire les tables HTML de la page Wikipédia et les a stocker dans la variable list_tables qui apparait dans l’nevironnement R Studio.\nL’objet list_tables contient 6 tables différentes de dimensions différentes.\n\n\n\n\n\n\n\n\n\n\ndata_medailles_sport_ete&lt;- list_tables[[1]]\nprint(data_medailles_sport_ete)\n\n# A tibble: 31 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;               \n 1 \"Discipline\" Discipline   Années Éditions    Épreuves(e… Or                  \n 2 \"\"           Athlétisme   Depui… 29          48          1028                \n 3 \"\"           Aviron       Depui… 28          14          269                 \n 4 \"\"           Badminton    Depui… 8           5           39                  \n 5 \"\"           Basket-ball  Depui… 20          4           32                  \n 6 \"\"           Boxe         1904,… 26          13          266                 \n 7 \"\"           Canoë-kayak  Depui… 20          16          242                 \n 8 \"\"           Cyclisme(ho… Depui… 29          22          263                 \n 9 \"\"           Équitation   1900,… 26          6           151                 \n10 \"\"           Escrime      Depui… 29          12          223                 \n# ℹ 21 more rows\n# ℹ 5 more variables: `médailles décernés` &lt;chr&gt;, `médailles décernés` &lt;chr&gt;,\n#   `médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\n\n\n\n\n\ndata_medailles_sport_ete&lt;-data_medailles_sport_ete[, -1]\n\n\n\n\n\ndata_medailles_sport_ete&lt;-data_medailles_sport_ete[ -1,]\n\n\n\n\n\ncolnames(data_medailles_sport_ete) &lt;- NULL\n\n\n\n\n\ncolnames(data_medailles_sport_ete)&lt;-c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n\n\n\n\n\n\n\n\nlibrary(dplyr)\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete %&gt;%\n  mutate(Editions = as.integer(Editions),\n         Epreuves_2020 = as.integer(Epreuves_2020),\n         Or = as.integer(Or),\n         Argent = as.integer(Argent),\n         Bronze = as.integer(Bronze),\n         Total = as.integer(Total))\n\n\n\n\n\ncols_a_convertir &lt;- c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")\n\ndata_medailles_sport_ete[cols_a_convertir] &lt;- lapply(data_medailles_sport_ete[cols_a_convertir], as.integer)\n\nprint(data_medailles_sport_ete)\n\n# A tibble: 30 × 10\n   Discipline            Annees Editions Epreuves_2020    Or Argent Bronze Total\n   &lt;chr&gt;                 &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n 1 Athlétisme            Depui…       29            48  1028   1030   1027  3085\n 2 Aviron                Depui…       28            14   269    268    273   810\n 3 Badminton             Depui…        8             5    39     39     43   121\n 4 Basket-ball           Depui…       20             4    32     32     32    96\n 5 Boxe                  1904,…       26            13   266    266    472  1004\n 6 Canoë-kayak           Depui…       20            16   242    241    243   726\n 7 Cyclisme(hommes, fem… Depui…       29            22   263    261    260   784\n 8 Équitation            1900,…       26             6   151    149    148   448\n 9 Escrime               Depui…       29            12   223    223    221   667\n10 Football              1900–…       27             2    34     34     35   103\n# ℹ 20 more rows\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\nstr(data_medailles_sport_ete)\n\ntibble [30 × 10] (S3: tbl_df/tbl/data.frame)\n $ Discipline        : chr [1:30] \"Athlétisme\" \"Aviron\" \"Badminton\" \"Basket-ball\" ...\n $ Annees            : chr [1:30] \"Depuis 1896\" \"Depuis 1900\" \"Depuis 1992\" \"Depuis 1936\" ...\n $ Editions          : int [1:30] 29 28 8 20 26 20 29 26 29 27 ...\n $ Epreuves_2020     : int [1:30] 48 14 5 4 13 16 22 6 12 2 ...\n $ Or                : int [1:30] 1028 269 39 32 266 242 263 151 223 34 ...\n $ Argent            : int [1:30] 1030 268 39 32 266 241 261 149 223 34 ...\n $ Bronze            : int [1:30] 1027 273 43 32 472 243 260 148 221 35 ...\n $ Total             : int [1:30] 3085 810 121 96 1004 726 784 448 667 103 ...\n $ Athletes_medailles: chr [1:30] \"Paavo Nurmi (FIN) (9-3-0)\" \"Elisabeta Lipă (ROU) (5-2-1)\" \"Gao Ling (CHN) (2-1-1)\" \"Teresa Edwards (USA) (4-0-1)\" ...\n $ Athletes_or       : chr [1:30] \"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\" \"Elisabeta Lipă (ROU) (5-2-1) Georgeta Damian (ROU) (5-0-1) Steven Redgrave (GBR) (5-0-1)\" \"Gao Ling (CHN) (2-1-1) Kim Dong-moon (KOR) (2-0-1) Zhang Nan (CHN) (2-0-1) Ge Fei (CHN) (2-0-0) Gu Jun (CHN) (2\"| __truncated__ \"Teresa Edwards (USA) (4-0-1) Sue Bird (USA) (4-0-0) Tamika Catchings (USA) (4-0-0) Lisa Leslie (USA) (4-0-0) Di\"| __truncated__ ...\n\n\n\n\n\n\n\n\n\ntop3_disciplines &lt;- data_medailles_sport_ete |&gt; \n  arrange(desc(Total)) |&gt; \n  head(3) |&gt; \n  select(Discipline, Total)\ntop3_disciplines  #Athletisme, Natation, Lutte \n\n# A tibble: 3 × 2\n  Discipline               Total\n  &lt;chr&gt;                    &lt;int&gt;\n1 Athlétisme                3085\n2 Natation(hommes, femmes)  1814\n3 Lutte                     1358\n\n\nL’athélisme, la natation et la lutte sont les trois disciplines avec le plus de médailles distribuées depuis le debut de l’histoire des JO.\n\n\n\n\n\n\n\nmoins_epreuves_2020 &lt;- data_medailles_sport_ete |&gt; \n  group_by(Discipline) |&gt; \n  summarise(Epreuves_2020) |&gt; \n  arrange(Epreuves_2020) |&gt; \n  head(10)\n\nmoins_epreuves_2020\n\n# A tibble: 10 × 2\n   Discipline            Epreuves_2020\n   &lt;chr&gt;                         &lt;int&gt;\n 1 Football                          2\n 2 Golf                              2\n 3 Handball                          2\n 4 Hockey sur gazon                  2\n 5 Natation synchronisée             2\n 6 Pentathlon moderne                2\n 7 Volley-ball                       2\n 8 Water polo                        2\n 9 Triathlon                         3\n10 Basket-ball                       4\n\n\nParmi les discplines ci-dessus, les 8 premières sont celles qui avec un nombre de 2 épreuves en présentent le moins.\n\n\n\n\n\n\n\n\ncalcul_nb_editions &lt;- function(depuis_annee, data_medailles_sport_ete) {\n  data_medailles_sport_ete$Annees &lt;- as.character(data_medailles_sport_ete$Annees)\n  \n  data_medailles_sport_ete$Annees &lt;- gsub(\".*(\\\\d{4}).*\", \"\\\\1\", data_medailles_sport_ete$Annees)\n  \n  data_medailles_sport_ete$Annees &lt;- as.numeric(data_medailles_sport_ete$Annees)\n  \n  disciplines_filtrees &lt;- subset(data_medailles_sport_ete, Annees &gt;= depuis_annee)\n  \n  result &lt;- aggregate(Editions ~ Discipline, disciplines_filtrees, sum)\n  \n  return(result)\n}\nresultat &lt;- calcul_nb_editions(1800, data_medailles_sport_ete)\nprint(resultat)\n\n                    Discipline Editions\n1                   Athlétisme       29\n2                       Aviron       28\n3                    Badminton        8\n4                  Basket-ball       20\n5                         Boxe       26\n6                  Canoë-kayak       20\n7     Cyclisme(hommes, femmes)       29\n8                   Équitation       26\n9                      Escrime       29\n10                    Football       27\n11                        Golf        4\n12 Gymnastique(hommes, femmes)       29\n13               Haltérophilie       26\n14                    Handball       14\n15            Hockey sur gazon       24\n16                        Judo       14\n17                       Lutte       28\n18       Natation synchronisée       10\n19    Natation(hommes, femmes)       29\n20          Pentathlon moderne       25\n21                    Plongeon       27\n22                   Taekwondo        6\n23                      Tennis       16\n24             Tennis de table        9\n25                         Tir       27\n26                 Tir à l'arc       17\n27                   Triathlon        6\n28                       Voile       27\n29                 Volley-ball       15\n30                  Water polo       26\n\n\nDans cette fonction, nous traitons les données des médailles olympiques d’été pour calculer le nombre total d’éditions pour chaque discipline sportive, en se basant sur l’année spécifiée par l’utilisateur. Tout d’abord, nous convertissons la colonne “Années” en chaînes de caractères pour uniformiser les données, puis nous extrayons les années pertinentes à l’aide d’une expression régulière. Ensuite, nous convertissons ces années en données numériques pour faciliter les calculs ultérieurs. En filtrant les données à partir de l’année spécifiée, nous excluons les éditions antérieures, avant d’agréger les résultats pour chaque discipline sportive, calculant ainsi la somme des éditions.\n\n\n\n\n\n\n\n\n\n\n\n\ncalcul_nb_editions_str &lt;- function(x) {\n  r &lt;- str_split(x, \",\", simplify = TRUE)\n  part &lt;- ifelse(!grepl(\"(?i)depuis|[-—–—]\", r[,]), \"1\", r[,])\n  return(part)\n}\ncalcul_nb_editions_int &lt;- function(part) {\n  depuis_years &lt;- str_extract_all(part, \"(?i)depuis\\\\s+(\\\\d{4})\") |&gt; \n    unlist() |&gt; \n    str_extract(\"\\\\d+\")\n \n  Calcul_edition &lt;- as.integer(depuis_years)\n  result &lt;- (2024 - Calcul_edition) / 4 - ifelse(Calcul_edition &lt; 1916, 3, ifelse(Calcul_edition &lt; 1944, 2, 0))\n \n  part2 &lt;- ifelse(grepl(\"(?i)depuis\\\\s+\\\\d{4}\", part), as.character(result), part)\n \n  return(part2)\n}\ncalcul_final &lt;- function(part2) {\n  part2_numerique &lt;- as.numeric(part2)\n  resultat_final &lt;- sum(part2_numerique)\n  return(resultat_final)\n}\ncalcul_nb_editions &lt;- function(x) {\n  part1 &lt;- calcul_nb_editions_str(x)\n  part2 &lt;- calcul_nb_editions_int(part1)\n  resultat_final &lt;- calcul_final(part2)\n  return(resultat_final)\n}\nresultat2 &lt;- calcul_nb_editions(\"1896, 1904, depuis 1920\")\nprint(resultat2)\n\n[1] 26\n\n\nLa valeur 26 a bien été retournée.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncalcul_nb_editions_str &lt;- function(x) {\n  r &lt;- str_split(x, \",\", simplify = TRUE)\n  part &lt;- ifelse(!grepl(\"(?i)depuis|[-—–—]\", r[,]), \"1\", r[,])\n  return(part)\n}\ncalcul_nb_editions_int &lt;- function(part) {\n  depuis_years &lt;- str_extract_all(part, \"(?i)depuis\\\\s+(\\\\d{4})\") |&gt; \n    unlist() |&gt; \n    str_extract(\"\\\\d+\")\n \n  Calcul_edition &lt;- as.integer(depuis_years)\n  result &lt;- (2024 - Calcul_edition) / 4 - ifelse(Calcul_edition &lt; 1916, 3, ifelse(Calcul_edition &lt; 1944, 2, 0))\n \n  part2 &lt;- ifelse(grepl(\"(?i)depuis\\\\s+\\\\d{4}\", part), as.character(result), part)\n \n  return(part2)\n}\n\ncalcul_nb_editions.character &lt;- function(part2) {\n  dates &lt;- str_match(part2, \"([file://\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4}]\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4})\")\n  a &lt;- as.integer(dates[1, 2])\n  b &lt;- as.integer(dates[1, 3])\n \n  x &lt;- ifelse(a &lt; 1915 & b &gt; 1917, 1,\n              ifelse(a &lt; 1915 & b &gt; 1945, 3,\n                     ifelse(1917 &lt; a & a &lt; 1939 & b &gt; 1945, 2, 0)))\n \n  c_value &lt;- (b - a) / 4 + 1 - x\n  part3 &lt;- ifelse(grepl(\"(\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4})\", part2), as.character(c_value), part2)\n  return(part3)\n}\ncalcul_final2 &lt;- function(part3) {\npart3_numerique &lt;- as.numeric(part3[grepl(\"^\\\\d+$\", part3)])\n  resultat_final &lt;- sum(part3_numerique)\n  return(resultat_final)\n}\ncalcul_nb_editions2 &lt;- function(x) {\n  part1 &lt;- calcul_nb_editions_str(x)\n  part2 &lt;- calcul_nb_editions_int(part1)\n  part3 &lt;- calcul_nb_editions.character(part2)\n  resultat_final &lt;- calcul_final2(part3)\n \n  return(resultat_final)\n}\n\nresultat3 &lt;- calcul_nb_editions(2000)\nprint(resultat3)\n\n[1] 1\n\nresultat4 &lt;- calcul_nb_editions(\"1904-1924, depuis 1948\")\n\nWarning in calcul_final(part2): NAs introduced by coercion\n\nprint(resultat4)\n\n[1] NA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncalcul_medailles_individuelles &lt;- function(data_medailles_sport_ete) {\n  total_medailles &lt;- rowSums(data_medailles_sport_ete[, c(\"Or\", \"Argent\", \"Bronze\")])\n  max_medailles &lt;- max(total_medailles)\n  athletes_max_medailles &lt;- data_medailles_sport_ete$Athletes_medailles[total_medailles == max_medailles]\n  return(athletes_max_medailles)\n}\nresultat5 &lt;- calcul_medailles_individuelles(data_medailles_sport_ete)\nprint(resultat5)\n\n[1] \"Paavo Nurmi (FIN) (9-3-0)\"\n\n\nC’est bien Paavo Nurmi qui ressort.\n\n\n\n\n\n\n\nathletes &lt;- unlist(lapply(data_medailles_sport_ete$Athletes_medailles, function(athletes) {\n  calcul_medailles_individuelles(data_medailles_sport_ete[data_medailles_sport_ete$Athletes_medailles == athletes, ])\n}))\nathletes\n\n [1] \"Paavo Nurmi (FIN) (9-3-0)\"                                                                                                                                                                                                                                                                              \n [2] \"Elisabeta Lipă (ROU) (5-2-1)\"                                                                                                                                                                                                                                                                           \n [3] \"Gao Ling (CHN) (2-1-1)\"                                                                                                                                                                                                                                                                                 \n [4] \"Teresa Edwards (USA) (4-0-1)\"                                                                                                                                                                                                                                                                           \n [5] \"László Papp (HUN) (3-0-0) Félix Savón (CUB) (3-0-0) Teófilo Stevenson (CUB) (3-0-0) Roniel Iglesias (CUB) (2-0-1) Boris Lagutin (URS) (2-0-1) Oleg Saitov (RUS) (2-0-1) Zou Shiming (CHN) (2-0-1) Roberto Cammarelle (ITA) (1-1-1) Zbigniew Pietrzykowski (POL) (0-1-2) Arnold Vanderlyde (NED) (0-0-3)\"\n [6] \"Birgit Fischer (GER) (8-4-0)\"                                                                                                                                                                                                                                                                           \n [7] \"Jason Kenny (GBR) (7-2-0)\"                                                                                                                                                                                                                                                                              \n [8] \"Isabell Werth (GER) (7-5-0)\"                                                                                                                                                                                                                                                                            \n [9] \"Edoardo Mangiarotti (ITA) (6-5-2)\"                                                                                                                                                                                                                                                                      \n[10] \"Christie Rampone (USA) (3-1-0)\"                                                                                                                                                                                                                                                                         \n[11] \"Chandler Egan (USA) (1-1-0) Lydia Ko (NZL) (0-1-1) Francis Newton (USA) (0-1-1)\"                                                                                                                                                                                                                        \n[12] \"Larissa Latynina (URS) (9-5-4)\"                                                                                                                                                                                                                                                                         \n[13] \"Andreï Lavrov (RUS) (3-0-1) Oh Seong-ok (KOR) (1-2-1)\"                                                                                                                                                                                                                                                  \n[14] \"Pýrros Dímas (GRE) (3-0-1) Ronny Weller (GER) (1-2-1) Nikolaj Pešalov (BUL, CRO) (1-1-2) Norbert Schemansky (USA) (1-1-2) Eko Yuli Irawan (INA) (0-2-2)\"                                                                                                                                                \n[15] \"Leslie Claudius (IND) (3-1-0) Udham Singh (IND) (3-1-0) Teun de Nooijer (NED) (2-2-0) Luciana Aymar (ARG) (0-2-2)\"                                                                                                                                                                                      \n[16] \"Teddy Riner (FRA) (3-0-2) Ryōko Tani (JPN) (2-2-1)\"                                                                                                                                                                                                                                                     \n[17] \"Wilfried Dietrich (RFA) (1-2-2)\"                                                                                                                                                                                                                                                                        \n[18] \"Michael Phelps (USA) (23-3-2)\"                                                                                                                                                                                                                                                                          \n[19] \"Svetlana Romashina (RUS) (7-0-0)\"                                                                                                                                                                                                                                                                       \n[20] \"Pavel Lednev (URS) (2-2-3)\"                                                                                                                                                                                                                                                                             \n[21] \"Dmitri Sautin (RUS) (2-2-4)\"                                                                                                                                                                                                                                                                            \n[22] \"Hwang Kyung-seon (KOR) (2-0-1) Steven López (USA) (2-0-1) Hadi Saei (IRI) (2-0-1) María Espinoza (MEX) (1-1-1)\"                                                                                                                                                                                         \n[23] \"Venus Williams (USA) (4-1-0) Kitty McKane (GBR) (1-2-2)\"                                                                                                                                                                                                                                                \n[24] \"Ma Long (CHN) (5-0-0) Wang Nan (CHN) (4-1-0) Wang Hao (CHN) (2-3-0)\"                                                                                                                                                                                                                                    \n[25] \"Carl Osburn (USA) (5-4-2)\"                                                                                                                                                                                                                                                                              \n[26] \"Hubert Van Innis (BEL) (6-4-0)\"                                                                                                                                                                                                                                                                         \n[27] \"Jonathan Brownlee (GBR) (1-1-1)\"                                                                                                                                                                                                                                                                        \n[28] \"Ben Ainslie (GBR) (4-1-0) Robert Scheidt (BRA) (2-2-1) Torben Grael (BRA) (2-1-2)\"                                                                                                                                                                                                                      \n[29] \"Ana Fernández (CUB) (3-0-1) Kerri Walsh (USA) (3-0-1) Inna Ryskal (URS) (2-2-0) Sérgio Dutra Santos (BRA) (2-2-0) Sergey Tetyukhin (RUS) (1-1-2)\"                                                                                                                                                       \n[30] \"Dezső Gyarmati (HUN) (3-1-1)\"                                                                                                                                                                                                                                                                           \n\n\n\n\n\nathletes_triees &lt;- gsub(\"\\\\s*\\\\(.*\\\\)\", \"\", athletes)\n\ntop3_athletes &lt;- head(sort(table(athletes_triees), decreasing = TRUE), 3)\n\nprint(top3_athletes)\n\nathletes_triees\nAna Fernández Andreï Lavrov   Ben Ainslie \n            1             1             1 \n\n\n\n\n\n\ntable_medailles &lt;- table(data_medailles_sport_ete$Athletes_medailles)\n\ntable_triee2 &lt;- sort(table_medailles, decreasing = TRUE)\n\ntop3_athletes2 &lt;- names(table_triee2)[1:3]\n\nprint(top3_athletes2)\n\n[1] \"Ana Fernández (CUB) (3-0-1) Kerri Walsh (USA) (3-0-1) Inna Ryskal (URS) (2-2-0) Sérgio Dutra Santos (BRA) (2-2-0) Sergey Tetyukhin (RUS) (1-1-2)\"\n[2] \"Andreï Lavrov (RUS) (3-0-1) Oh Seong-ok (KOR) (1-2-1)\"                                                                                           \n[3] \"Ben Ainslie (GBR) (4-1-0) Robert Scheidt (BRA) (2-2-1) Torben Grael (BRA) (2-1-2)\"                                                               \n\n\nLe top 3 des athlètes est :\n\nAna Fernandez\nAndreï Lavrov\nBen Ainslie\n\n\n\n\n\n\n\n\n\n\n\nPour ce faire, vous implémenterez une fonction extraire_nationalite_athlete qui à partir d’une chaine de charactère extraira le nombre d’athlète et leur nationalité. Par exemple, la chaine de caractère “Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)” donnera en sortie c(“FIN” = 1, “USA” = 1).\nVous utilisez la fonction lapply pour appliquer la fonction à toute la colonne.\nVous agrégerez les résultats de manière à sommer toutes les lignes et à obtenir les 3 nations les plus représentées, et leur effectif.\n\n\n\n\nlibrary(stringr)\nextraire_nationalite_athlete &lt;- function(chaine) {\n  nationalites &lt;- regmatches(chaine, gregexpr(\"\\\\b[A-Z]{3}\\\\b\", chaine, perl=TRUE))[[1]]\n  return(nationalites)\n}\n\nnationalites_list &lt;- unlist(lapply(data_medailles_sport_ete$Athletes_or, extraire_nationalite_athlete))\n\ntop3_nationalites &lt;- head(sort(table(nationalites_list), decreasing = TRUE), 3)\n\nprint(top3_nationalites)\n\nnationalites_list\nUSA CHN CUB \n 20  13   8 \n\n\nLes trois nations les plus représentées pour toutes les épreuves au classement du nombre de médailles d’or individuelles sont les suivantes :\n\nLes États-Unis (USA), avec un total de 20 médailles d’or individuelles\nLa Chine (CHN), qui a remporté 13 médailles d’or individuelles\nCuba (CUB), avec 8 médailles d’or individuelles\n\n\n\n\n\n\n\n\nhiver &lt;- list_tables[[2]]\nprint(hiver)\n\n# A tibble: 16 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;               \n 1 \"Discipline\" Discipline   Années Éditions    épreuves e… Or                  \n 2 \"\"           Biathlon     1924,… 16          11          54                  \n 3 \"\"           Bobsleigh    1924-… 21          3           39                  \n 4 \"\"           Combiné nor… Depui… 22          3           28                  \n 5 \"\"           Curling      1924,… 4           2           7                   \n 6 \"\"           Hockey sur … Été :… 23          2           24                  \n 7 \"\"           Luge         Depui… 14          4           37                  \n 8 \"\"           Patinage ar… Été :… 24          4           77                  \n 9 \"\"           Patinage de… Depui… 22          12          152                 \n10 \"\"           Patinage de… Depui… 7           8           32                  \n11 \"\"           Saut à ski   Depui… 22          4           38                  \n12 \"\"           Skeleton     1924,… 6           2           6                   \n13 \"\"           Ski acrobat… Depui… 7           10          18                  \n14 \"\"           Ski alpin    Depui… 19          10          132                 \n15 \"\"           Ski de fond  Depui… 22          12          134                 \n16 \"\"           Snowboard    Depui… 5           10          14                  \n# ℹ 5 more variables: `médailles décernés` &lt;chr&gt;, `médailles décernés` &lt;chr&gt;,\n#   `médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\n\n\n\n\nhiver &lt;- hiver[,-1]\ncolnames(hiver) = c(\"Discipline\", \"Annee\", \"Editions\", \"Epreuves_2014\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n\nhiver &lt;- hiver[-1,]\nstr(hiver)\n\ntibble [15 × 10] (S3: tbl_df/tbl/data.frame)\n $ Discipline        : chr [1:15] \"Biathlon\" \"Bobsleigh\" \"Combiné nordique\" \"Curling\" ...\n $ Annee             : chr [1:15] \"1924,Depuis 1960\" \"1924-1956,depuis 1964\" \"Depuis 1924\" \"1924,depuis 1998\" ...\n $ Editions          : chr [1:15] \"16\" \"21\" \"22\" \"4\" ...\n $ Epreuves_2014     : chr [1:15] \"11\" \"3\" \"3\" \"2\" ...\n $ Or                : chr [1:15] \"54\" \"39\" \"28\" \"7\" ...\n $ Argent            : chr [1:15] \"54\" \"37\" \"28\" \"7\" ...\n $ Bronze            : chr [1:15] \"54\" \"39\" \"28\" \"7\" ...\n $ Total             : chr [1:15] \"162\" \"115\" \"84\" \"21\" ...\n $ Athletes_medailles: chr [1:15] \"Ole Einar Bjørndalen (NOR) (8-4-1)\" \"Bogdan Musiol (RDA) (1-5-1)\" \"Felix Gottwald (AUT) (3-1-3)\" \"Anna Le Moine (SWE) (2-0-0) Cathrine Lindahl (SWE) (2-0-0) Eva Lund (SWE) (2-0-0) Anette Norberg (SWE) (2-0-0)\\\"| __truncated__ ...\n $ Athletes_or       : chr [1:15] \"Ole Einar Bjørndalen (NOR) (8-4-1)\" \"Kevin Kuske (GER) (4-1-0) André Lange (GER) (4-1-0)\" \"Samppa Lajunen (FIN) (3-2-0)\\n Eric Frenzel (GER) (3-1-2)\\n Felix Gottwald (AUT) (3-1-3) Johan Grøttumsbråten (\"| __truncated__ \"Anna Le Moine (SWE) (2-0-0) Cathrine Lindahl (SWE) (2-0-0) Eva Lund (SWE) (2-0-0) Anette Norberg (SWE) (2-0-0)\\\"| __truncated__ ...\n\nlibrary(dplyr)\nhiver &lt;- hiver |&gt; \n  mutate(Editions = as.integer(Editions),\n         Epreuves_2014 = as.integer(Epreuves_2014),\n         Or = as.integer(Or),\n         Argent = as.integer(Argent),\n         Bronze = as.integer(Bronze),\n         Total = as.integer(Total))\n\nprint(hiver)\n\n# A tibble: 15 × 10\n   Discipline             Annee Editions Epreuves_2014    Or Argent Bronze Total\n   &lt;chr&gt;                  &lt;chr&gt;    &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n 1 Biathlon               1924…       16            11    54     54     54   162\n 2 Bobsleigh              1924…       21             3    39     37     39   115\n 3 Combiné nordique       Depu…       22             3    28     28     28    84\n 4 Curling                1924…        4             2     7      7      7    21\n 5 Hockey sur glace       Été …       23             2    24     24     24    72\n 6 Luge                   Depu…       14             4    37     35     36   108\n 7 Patinage artistique    Été …       24             4    77     75     76   228\n 8 Patinage de vitesse    Depu…       22            12   152    155    148   455\n 9 Patinage de vitesse s… Depu…        7             8    32     32     32    96\n10 Saut à ski             Depu…       22             4    38     39     37   114\n11 Skeleton               1924…        6             2     6      6      6    18\n12 Ski acrobatique        Depu…        7            10    18     18     18    54\n13 Ski alpin              Depu…       19            10   132    135    130   397\n14 Ski de fond            Depu…       22            12   134    132    133   399\n15 Snowboard              Depu…        5            10    14     14     14    42\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\nstr(hiver)\n\ntibble [15 × 10] (S3: tbl_df/tbl/data.frame)\n $ Discipline        : chr [1:15] \"Biathlon\" \"Bobsleigh\" \"Combiné nordique\" \"Curling\" ...\n $ Annee             : chr [1:15] \"1924,Depuis 1960\" \"1924-1956,depuis 1964\" \"Depuis 1924\" \"1924,depuis 1998\" ...\n $ Editions          : int [1:15] 16 21 22 4 23 14 24 22 7 22 ...\n $ Epreuves_2014     : int [1:15] 11 3 3 2 2 4 4 12 8 4 ...\n $ Or                : int [1:15] 54 39 28 7 24 37 77 152 32 38 ...\n $ Argent            : int [1:15] 54 37 28 7 24 35 75 155 32 39 ...\n $ Bronze            : int [1:15] 54 39 28 7 24 36 76 148 32 37 ...\n $ Total             : int [1:15] 162 115 84 21 72 108 228 455 96 114 ...\n $ Athletes_medailles: chr [1:15] \"Ole Einar Bjørndalen (NOR) (8-4-1)\" \"Bogdan Musiol (RDA) (1-5-1)\" \"Felix Gottwald (AUT) (3-1-3)\" \"Anna Le Moine (SWE) (2-0-0) Cathrine Lindahl (SWE) (2-0-0) Eva Lund (SWE) (2-0-0) Anette Norberg (SWE) (2-0-0)\\\"| __truncated__ ...\n $ Athletes_or       : chr [1:15] \"Ole Einar Bjørndalen (NOR) (8-4-1)\" \"Kevin Kuske (GER) (4-1-0) André Lange (GER) (4-1-0)\" \"Samppa Lajunen (FIN) (3-2-0)\\n Eric Frenzel (GER) (3-1-2)\\n Felix Gottwald (AUT) (3-1-3) Johan Grøttumsbråten (\"| __truncated__ \"Anna Le Moine (SWE) (2-0-0) Cathrine Lindahl (SWE) (2-0-0) Eva Lund (SWE) (2-0-0) Anette Norberg (SWE) (2-0-0)\\\"| __truncated__ ...\n\n\n\ncalcul_medailles_individuelles_purrr &lt;- function(data_frame) {\n    medailles_df &lt;- data.frame(\n      Athlete = gsub(\"[file://\\\\s*\\\\(.*\\\\]\\\\s*\\\\(.*\\\\)\", \"\", data_frame$Athletes_medailles),\n      Pays = gsub(\".*\\\\((\\\\w+)\\\\)\", \"\\\\1\", data_frame$Athletes_medailles),\n      OR = as.integer(gsub(\".*\\\\((\\\\d+)-\\\\d+-\\\\d+\\\\)\", \"\\\\1\", data_frame$Athletes_medailles)),\n      ARGENT = as.integer(gsub(\".*\\\\(\\\\d+-(\\\\d+)-\\\\d+\\\\)\", \"\\\\1\", data_frame$Athletes_medailles)),\n      BRONZE = as.integer(gsub(\".*\\\\(\\\\d+-\\\\d+-(\\\\d+)\\\\)\", \"\\\\1\", data_frame$Athletes_medailles))\n    )\n   \n    medailles_df$TotalMedailles &lt;- medailles_df$OR + medailles_df$ARGENT + medailles_df$BRONZE\n   \n    classement_df &lt;- medailles_df[order(-medailles_df$TotalMedailles, -medailles_df$OR, -medailles_df$ARGENT, -medailles_df$BRONZE), ]\n   \n    meilleurs_athletes &lt;- head(classement_df$Athlete, 3)\n   \n    phrase &lt;- cat(\"Les 3 meilleurs athlètes sont :\\n\", paste(\"- \", meilleurs_athletes, collapse = \"\\n\"))\n   \n    return(phrase)\n}\ncalcul_medailles_individuelles_purrr(hiver)\n\nLes 3 meilleurs athlètes sont :\n -  Marit Bjørgen (NOR) (8-4-3)\n-  Ole Einar Bjørndalen (NOR) (8-4-1)\n-  Ireen Wüst (NED) (5-5-1)\n\n\nNULL\n\n\nLes trois meilleurs athlètes sont donc :\n\nMarit Bjørgen (NOR)\nOle Einar Bjørndalen (NOR)\nIreen Wüst (NED)\n\n\nextraire_nationalite_athlete &lt;- function(chaine) {\n  nationalites &lt;- regmatches(chaine, gregexpr(\"\\\\b[A-Z]{3}\\\\b\", chaine, perl=TRUE))[[1]]\n  return(nationalites)\n}\n\nnationalites_list &lt;- map(hiver$Athletes_or, extraire_nationalite_athlete) |&gt; \n  flatten_chr()\n\ntop3_nationalites &lt;- nationalites_list |&gt; \n  table() |&gt; \n  sort(decreasing = TRUE) |&gt; \n  head(3)\n\nprint(top3_nationalites)\n\nnationalites_list\nCAN NOR GER \n  8   7   6 \n\n\nLes trois nations les plus représentées pour toutes les épreuves au classement du nombre de médailles d’or individuelles sont les suivantes :\n\nLe Canada, avec un total de 8 médailles d’or individuelles\nLa Norvège, qui compte 7 médailles d’or individuelles\nL’Allemagne, avec 6 médailles d’or individuelles\n\nLa fonction purr semble offrir une syntaxe plus cohérente, plus lisible et flexible pour appliquer des opérations sur des listes. Les résultats sont différents des précédents."
  },
  {
    "objectID": "posts/post-with-code/Exercice2.html#exercices---semaine-2",
    "href": "posts/post-with-code/Exercice2.html#exercices---semaine-2",
    "title": "Exercices - Semaine 2",
    "section": "",
    "text": "Démarrez un nouveau projet rstudio intitulé TP2. Installez la library rvest en utilisant la commande install.packages(“rvest”). Cette librairie sera utilisée pour lire des tables de données directement depuis le web. De même, installez le package purrr.\n\n\n#install.packages(c(\"rvest\", \"dplyr\", \"purrr\"))\nlibrary(readr)\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(stringr)\n\n\n\n\n\n\n\n\n\nlist_tables &lt;- session(“https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques”)) |&gt; html_elements(”.wikitable”) |&gt; html_table()\nQue s’est-il passé ? Que contient l’objet list_tables ?\n\nlist_tables &lt;-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\n  html_elements(\".wikitable\") |&gt;\n  html_table()\n\nlist_tables # A tibble: 24 × 11\n\n[[1]]\n# A tibble: 31 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;               \n 1 \"Discipline\" Discipline   Années Éditions    Épreuves(e… Or                  \n 2 \"\"           Athlétisme   Depui… 29          48          1028                \n 3 \"\"           Aviron       Depui… 28          14          269                 \n 4 \"\"           Badminton    Depui… 8           5           39                  \n 5 \"\"           Basket-ball  Depui… 20          4           32                  \n 6 \"\"           Boxe         1904,… 26          13          266                 \n 7 \"\"           Canoë-kayak  Depui… 20          16          242                 \n 8 \"\"           Cyclisme(ho… Depui… 29          22          263                 \n 9 \"\"           Équitation   1900,… 26          6           151                 \n10 \"\"           Escrime      Depui… 29          12          223                 \n# ℹ 21 more rows\n# ℹ 5 more variables: `médailles décernés` &lt;chr&gt;, `médailles décernés` &lt;chr&gt;,\n#   `médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\n[[2]]\n# A tibble: 16 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;               \n 1 \"Discipline\" Discipline   Années Éditions    épreuves e… Or                  \n 2 \"\"           Biathlon     1924,… 16          11          54                  \n 3 \"\"           Bobsleigh    1924-… 21          3           39                  \n 4 \"\"           Combiné nor… Depui… 22          3           28                  \n 5 \"\"           Curling      1924,… 4           2           7                   \n 6 \"\"           Hockey sur … Été :… 23          2           24                  \n 7 \"\"           Luge         Depui… 14          4           37                  \n 8 \"\"           Patinage ar… Été :… 24          4           77                  \n 9 \"\"           Patinage de… Depui… 22          12          152                 \n10 \"\"           Patinage de… Depui… 7           8           32                  \n11 \"\"           Saut à ski   Depui… 22          4           38                  \n12 \"\"           Skeleton     1924,… 6           2           6                   \n13 \"\"           Ski acrobat… Depui… 7           10          18                  \n14 \"\"           Ski alpin    Depui… 19          10          132                 \n15 \"\"           Ski de fond  Depui… 22          12          134                 \n16 \"\"           Snowboard    Depui… 5           10          14                  \n# ℹ 5 more variables: `médailles décernés` &lt;chr&gt;, `médailles décernés` &lt;chr&gt;,\n#   `médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\n[[3]]\n# A tibble: 14 × 8\n   Discipline   Discipline       Années `Nombre d'éditions` `Médailles décernés`\n   &lt;chr&gt;        &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;               &lt;chr&gt;               \n 1 \"Discipline\" Discipline       Années Nombre d'éditions   Or                  \n 2 \"\"           Baseball         1992–… 5                   5                   \n 3 \"\"           Pelote basque    1900   1                   1                   \n 4 \"\"           Cricket          1900   1                   1                   \n 5 \"\"           Croquet          1900   1                   3                   \n 6 \"\"           Jeu de paume     1908   1                   1                   \n 7 \"\"           Crosse           1904–… 2                   2                   \n 8 \"\"           Polo             1900,… 5                   5                   \n 9 \"\"           Jeu de raquettes 1908   1                   2                   \n10 \"\"           Roque            1904   1                   1                   \n11 \"\"           Rugby à XV       1900,… 4                   4                   \n12 \"\"           Softball         1996–… 4                   4                   \n13 \"\"           Tir à la corde   1900–… 5                   5                   \n14 \"\"           Motonautisme     1908   5                   3                   \n# ℹ 3 more variables: `Médailles décernés` &lt;chr&gt;, `Médailles décernés` &lt;chr&gt;,\n#   `Médailles décernés` &lt;chr&gt;\n\n[[4]]\n# A tibble: 2 × 8\n  Discipline   Discipline        Années `Nombre d'éditions` `Médailles décernés`\n  &lt;chr&gt;        &lt;chr&gt;             &lt;chr&gt;  &lt;chr&gt;               &lt;chr&gt;               \n1 \"Discipline\" Discipline        Années Nombre d'éditions   Or                  \n2 \"\"           Patrouille milit… 1924   1                   1                   \n# ℹ 3 more variables: `Médailles décernés` &lt;chr&gt;, `Médailles décernés` &lt;chr&gt;,\n#   `Médailles décernés` &lt;chr&gt;\n\n[[5]]\n# A tibble: 30 × 11\n   Jeux  Médaille  Médaille Hôte     Nombred'épreuves(ave…¹ `Médailles décernés`\n   &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;                  &lt;chr&gt;               \n 1 Jeux  Médaille  Médaille Hôte     Nombred'épreuves(avec… Or                  \n 2 1896  médaillés tableau  Athènes… 43                     43                  \n 3 1900  médaillés tableau  Paris, … 95                     90                  \n 4 1904  médaillés tableau  Saint-L… 91                     96                  \n 5 1908  médaillés tableau  Londres… 110                    110                 \n 6 1912  médaillés tableau  Stockho… 102                    103                 \n 7 1920  médaillés tableau  Anvers,… 154                    156                 \n 8 1924  médaillés tableau  Paris, … 126                    126                 \n 9 1928  médaillés tableau  Amsterd… 109                    111                 \n10 1932  médaillés tableau  Los Ang… 117                    116                 \n# ℹ 20 more rows\n# ℹ abbreviated name: ¹​`Nombred'épreuves(avec médailles)`\n# ℹ 5 more variables: `Médailles décernés` &lt;chr&gt;, `Médailles décernés` &lt;chr&gt;,\n#   `Médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\n[[6]]\n# A tibble: 24 × 11\n   Jeux  Médaille  Médaille Hôte     Nombred'épreuves(ave…¹ `Médailles décernés`\n   &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;                  &lt;chr&gt;               \n 1 Jeux  Médaille  Médaille Hôte     Nombred'épreuves(avec… Or                  \n 2 1924  médaillés tableau  Chamoni… 16                     16                  \n 3 1928  médaillés tableau  Saint-M… 14                     14                  \n 4 1932  médaillés tableau  Lake Pl… 14                     14                  \n 5 1936  médaillés tableau  Garmisc… 17                     17                  \n 6 1948  médaillés tableau  Saint-M… 22                     22                  \n 7 1952  médaillés tableau  Oslo, N… 22                     22                  \n 8 1956  médaillés tableau  Cortina… 24                     25                  \n 9 1960  médaillés tableau  Squaw V… 27                     28                  \n10 1964  médaillés tableau  Innsbru… 34                     34                  \n# ℹ 14 more rows\n# ℹ abbreviated name: ¹​`Nombred'épreuves(avec médailles)`\n# ℹ 5 more variables: `Médailles décernés` &lt;chr&gt;, `Médailles décernés` &lt;chr&gt;,\n#   `Médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\nView(list_tables[[1]])\n\nLe code a réussi à extraire les tables HTML de la page Wikipédia et les a stocker dans la variable list_tables qui apparait dans l’nevironnement R Studio.\nL’objet list_tables contient 6 tables différentes de dimensions différentes.\n\n\n\n\n\n\n\n\n\n\ndata_medailles_sport_ete&lt;- list_tables[[1]]\nprint(data_medailles_sport_ete)\n\n# A tibble: 31 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;               \n 1 \"Discipline\" Discipline   Années Éditions    Épreuves(e… Or                  \n 2 \"\"           Athlétisme   Depui… 29          48          1028                \n 3 \"\"           Aviron       Depui… 28          14          269                 \n 4 \"\"           Badminton    Depui… 8           5           39                  \n 5 \"\"           Basket-ball  Depui… 20          4           32                  \n 6 \"\"           Boxe         1904,… 26          13          266                 \n 7 \"\"           Canoë-kayak  Depui… 20          16          242                 \n 8 \"\"           Cyclisme(ho… Depui… 29          22          263                 \n 9 \"\"           Équitation   1900,… 26          6           151                 \n10 \"\"           Escrime      Depui… 29          12          223                 \n# ℹ 21 more rows\n# ℹ 5 more variables: `médailles décernés` &lt;chr&gt;, `médailles décernés` &lt;chr&gt;,\n#   `médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\n\n\n\n\n\ndata_medailles_sport_ete&lt;-data_medailles_sport_ete[, -1]\n\n\n\n\n\ndata_medailles_sport_ete&lt;-data_medailles_sport_ete[ -1,]\n\n\n\n\n\ncolnames(data_medailles_sport_ete) &lt;- NULL\n\n\n\n\n\ncolnames(data_medailles_sport_ete)&lt;-c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n\n\n\n\n\n\n\n\nlibrary(dplyr)\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete %&gt;%\n  mutate(Editions = as.integer(Editions),\n         Epreuves_2020 = as.integer(Epreuves_2020),\n         Or = as.integer(Or),\n         Argent = as.integer(Argent),\n         Bronze = as.integer(Bronze),\n         Total = as.integer(Total))\n\n\n\n\n\ncols_a_convertir &lt;- c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")\n\ndata_medailles_sport_ete[cols_a_convertir] &lt;- lapply(data_medailles_sport_ete[cols_a_convertir], as.integer)\n\nprint(data_medailles_sport_ete)\n\n# A tibble: 30 × 10\n   Discipline            Annees Editions Epreuves_2020    Or Argent Bronze Total\n   &lt;chr&gt;                 &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n 1 Athlétisme            Depui…       29            48  1028   1030   1027  3085\n 2 Aviron                Depui…       28            14   269    268    273   810\n 3 Badminton             Depui…        8             5    39     39     43   121\n 4 Basket-ball           Depui…       20             4    32     32     32    96\n 5 Boxe                  1904,…       26            13   266    266    472  1004\n 6 Canoë-kayak           Depui…       20            16   242    241    243   726\n 7 Cyclisme(hommes, fem… Depui…       29            22   263    261    260   784\n 8 Équitation            1900,…       26             6   151    149    148   448\n 9 Escrime               Depui…       29            12   223    223    221   667\n10 Football              1900–…       27             2    34     34     35   103\n# ℹ 20 more rows\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\nstr(data_medailles_sport_ete)\n\ntibble [30 × 10] (S3: tbl_df/tbl/data.frame)\n $ Discipline        : chr [1:30] \"Athlétisme\" \"Aviron\" \"Badminton\" \"Basket-ball\" ...\n $ Annees            : chr [1:30] \"Depuis 1896\" \"Depuis 1900\" \"Depuis 1992\" \"Depuis 1936\" ...\n $ Editions          : int [1:30] 29 28 8 20 26 20 29 26 29 27 ...\n $ Epreuves_2020     : int [1:30] 48 14 5 4 13 16 22 6 12 2 ...\n $ Or                : int [1:30] 1028 269 39 32 266 242 263 151 223 34 ...\n $ Argent            : int [1:30] 1030 268 39 32 266 241 261 149 223 34 ...\n $ Bronze            : int [1:30] 1027 273 43 32 472 243 260 148 221 35 ...\n $ Total             : int [1:30] 3085 810 121 96 1004 726 784 448 667 103 ...\n $ Athletes_medailles: chr [1:30] \"Paavo Nurmi (FIN) (9-3-0)\" \"Elisabeta Lipă (ROU) (5-2-1)\" \"Gao Ling (CHN) (2-1-1)\" \"Teresa Edwards (USA) (4-0-1)\" ...\n $ Athletes_or       : chr [1:30] \"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\" \"Elisabeta Lipă (ROU) (5-2-1) Georgeta Damian (ROU) (5-0-1) Steven Redgrave (GBR) (5-0-1)\" \"Gao Ling (CHN) (2-1-1) Kim Dong-moon (KOR) (2-0-1) Zhang Nan (CHN) (2-0-1) Ge Fei (CHN) (2-0-0) Gu Jun (CHN) (2\"| __truncated__ \"Teresa Edwards (USA) (4-0-1) Sue Bird (USA) (4-0-0) Tamika Catchings (USA) (4-0-0) Lisa Leslie (USA) (4-0-0) Di\"| __truncated__ ...\n\n\n\n\n\n\n\n\n\ntop3_disciplines &lt;- data_medailles_sport_ete |&gt; \n  arrange(desc(Total)) |&gt; \n  head(3) |&gt; \n  select(Discipline, Total)\ntop3_disciplines  #Athletisme, Natation, Lutte \n\n# A tibble: 3 × 2\n  Discipline               Total\n  &lt;chr&gt;                    &lt;int&gt;\n1 Athlétisme                3085\n2 Natation(hommes, femmes)  1814\n3 Lutte                     1358\n\n\nL’athélisme, la natation et la lutte sont les trois disciplines avec le plus de médailles distribuées depuis le debut de l’histoire des JO.\n\n\n\n\n\n\n\nmoins_epreuves_2020 &lt;- data_medailles_sport_ete |&gt; \n  group_by(Discipline) |&gt; \n  summarise(Epreuves_2020) |&gt; \n  arrange(Epreuves_2020) |&gt; \n  head(10)\n\nmoins_epreuves_2020\n\n# A tibble: 10 × 2\n   Discipline            Epreuves_2020\n   &lt;chr&gt;                         &lt;int&gt;\n 1 Football                          2\n 2 Golf                              2\n 3 Handball                          2\n 4 Hockey sur gazon                  2\n 5 Natation synchronisée             2\n 6 Pentathlon moderne                2\n 7 Volley-ball                       2\n 8 Water polo                        2\n 9 Triathlon                         3\n10 Basket-ball                       4\n\n\nParmi les discplines ci-dessus, les 8 premières sont celles qui avec un nombre de 2 épreuves en présentent le moins.\n\n\n\n\n\n\n\n\ncalcul_nb_editions &lt;- function(depuis_annee, data_medailles_sport_ete) {\n  data_medailles_sport_ete$Annees &lt;- as.character(data_medailles_sport_ete$Annees)\n  \n  data_medailles_sport_ete$Annees &lt;- gsub(\".*(\\\\d{4}).*\", \"\\\\1\", data_medailles_sport_ete$Annees)\n  \n  data_medailles_sport_ete$Annees &lt;- as.numeric(data_medailles_sport_ete$Annees)\n  \n  disciplines_filtrees &lt;- subset(data_medailles_sport_ete, Annees &gt;= depuis_annee)\n  \n  result &lt;- aggregate(Editions ~ Discipline, disciplines_filtrees, sum)\n  \n  return(result)\n}\nresultat &lt;- calcul_nb_editions(1800, data_medailles_sport_ete)\nprint(resultat)\n\n                    Discipline Editions\n1                   Athlétisme       29\n2                       Aviron       28\n3                    Badminton        8\n4                  Basket-ball       20\n5                         Boxe       26\n6                  Canoë-kayak       20\n7     Cyclisme(hommes, femmes)       29\n8                   Équitation       26\n9                      Escrime       29\n10                    Football       27\n11                        Golf        4\n12 Gymnastique(hommes, femmes)       29\n13               Haltérophilie       26\n14                    Handball       14\n15            Hockey sur gazon       24\n16                        Judo       14\n17                       Lutte       28\n18       Natation synchronisée       10\n19    Natation(hommes, femmes)       29\n20          Pentathlon moderne       25\n21                    Plongeon       27\n22                   Taekwondo        6\n23                      Tennis       16\n24             Tennis de table        9\n25                         Tir       27\n26                 Tir à l'arc       17\n27                   Triathlon        6\n28                       Voile       27\n29                 Volley-ball       15\n30                  Water polo       26\n\n\nDans cette fonction, nous traitons les données des médailles olympiques d’été pour calculer le nombre total d’éditions pour chaque discipline sportive, en se basant sur l’année spécifiée par l’utilisateur. Tout d’abord, nous convertissons la colonne “Années” en chaînes de caractères pour uniformiser les données, puis nous extrayons les années pertinentes à l’aide d’une expression régulière. Ensuite, nous convertissons ces années en données numériques pour faciliter les calculs ultérieurs. En filtrant les données à partir de l’année spécifiée, nous excluons les éditions antérieures, avant d’agréger les résultats pour chaque discipline sportive, calculant ainsi la somme des éditions.\n\n\n\n\n\n\n\n\n\n\n\n\ncalcul_nb_editions_str &lt;- function(x) {\n  r &lt;- str_split(x, \",\", simplify = TRUE)\n  part &lt;- ifelse(!grepl(\"(?i)depuis|[-—–—]\", r[,]), \"1\", r[,])\n  return(part)\n}\ncalcul_nb_editions_int &lt;- function(part) {\n  depuis_years &lt;- str_extract_all(part, \"(?i)depuis\\\\s+(\\\\d{4})\") |&gt; \n    unlist() |&gt; \n    str_extract(\"\\\\d+\")\n \n  Calcul_edition &lt;- as.integer(depuis_years)\n  result &lt;- (2024 - Calcul_edition) / 4 - ifelse(Calcul_edition &lt; 1916, 3, ifelse(Calcul_edition &lt; 1944, 2, 0))\n \n  part2 &lt;- ifelse(grepl(\"(?i)depuis\\\\s+\\\\d{4}\", part), as.character(result), part)\n \n  return(part2)\n}\ncalcul_final &lt;- function(part2) {\n  part2_numerique &lt;- as.numeric(part2)\n  resultat_final &lt;- sum(part2_numerique)\n  return(resultat_final)\n}\ncalcul_nb_editions &lt;- function(x) {\n  part1 &lt;- calcul_nb_editions_str(x)\n  part2 &lt;- calcul_nb_editions_int(part1)\n  resultat_final &lt;- calcul_final(part2)\n  return(resultat_final)\n}\nresultat2 &lt;- calcul_nb_editions(\"1896, 1904, depuis 1920\")\nprint(resultat2)\n\n[1] 26\n\n\nLa valeur 26 a bien été retournée.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncalcul_nb_editions_str &lt;- function(x) {\n  r &lt;- str_split(x, \",\", simplify = TRUE)\n  part &lt;- ifelse(!grepl(\"(?i)depuis|[-—–—]\", r[,]), \"1\", r[,])\n  return(part)\n}\ncalcul_nb_editions_int &lt;- function(part) {\n  depuis_years &lt;- str_extract_all(part, \"(?i)depuis\\\\s+(\\\\d{4})\") |&gt; \n    unlist() |&gt; \n    str_extract(\"\\\\d+\")\n \n  Calcul_edition &lt;- as.integer(depuis_years)\n  result &lt;- (2024 - Calcul_edition) / 4 - ifelse(Calcul_edition &lt; 1916, 3, ifelse(Calcul_edition &lt; 1944, 2, 0))\n \n  part2 &lt;- ifelse(grepl(\"(?i)depuis\\\\s+\\\\d{4}\", part), as.character(result), part)\n \n  return(part2)\n}\n\ncalcul_nb_editions.character &lt;- function(part2) {\n  dates &lt;- str_match(part2, \"([file://\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4}]\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4})\")\n  a &lt;- as.integer(dates[1, 2])\n  b &lt;- as.integer(dates[1, 3])\n \n  x &lt;- ifelse(a &lt; 1915 & b &gt; 1917, 1,\n              ifelse(a &lt; 1915 & b &gt; 1945, 3,\n                     ifelse(1917 &lt; a & a &lt; 1939 & b &gt; 1945, 2, 0)))\n \n  c_value &lt;- (b - a) / 4 + 1 - x\n  part3 &lt;- ifelse(grepl(\"(\\\\d{4})\\\\s*[-—–]\\\\s*(\\\\d{4})\", part2), as.character(c_value), part2)\n  return(part3)\n}\ncalcul_final2 &lt;- function(part3) {\npart3_numerique &lt;- as.numeric(part3[grepl(\"^\\\\d+$\", part3)])\n  resultat_final &lt;- sum(part3_numerique)\n  return(resultat_final)\n}\ncalcul_nb_editions2 &lt;- function(x) {\n  part1 &lt;- calcul_nb_editions_str(x)\n  part2 &lt;- calcul_nb_editions_int(part1)\n  part3 &lt;- calcul_nb_editions.character(part2)\n  resultat_final &lt;- calcul_final2(part3)\n \n  return(resultat_final)\n}\n\nresultat3 &lt;- calcul_nb_editions(2000)\nprint(resultat3)\n\n[1] 1\n\nresultat4 &lt;- calcul_nb_editions(\"1904-1924, depuis 1948\")\n\nWarning in calcul_final(part2): NAs introduced by coercion\n\nprint(resultat4)\n\n[1] NA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncalcul_medailles_individuelles &lt;- function(data_medailles_sport_ete) {\n  total_medailles &lt;- rowSums(data_medailles_sport_ete[, c(\"Or\", \"Argent\", \"Bronze\")])\n  max_medailles &lt;- max(total_medailles)\n  athletes_max_medailles &lt;- data_medailles_sport_ete$Athletes_medailles[total_medailles == max_medailles]\n  return(athletes_max_medailles)\n}\nresultat5 &lt;- calcul_medailles_individuelles(data_medailles_sport_ete)\nprint(resultat5)\n\n[1] \"Paavo Nurmi (FIN) (9-3-0)\"\n\n\nC’est bien Paavo Nurmi qui ressort.\n\n\n\n\n\n\n\nathletes &lt;- unlist(lapply(data_medailles_sport_ete$Athletes_medailles, function(athletes) {\n  calcul_medailles_individuelles(data_medailles_sport_ete[data_medailles_sport_ete$Athletes_medailles == athletes, ])\n}))\nathletes\n\n [1] \"Paavo Nurmi (FIN) (9-3-0)\"                                                                                                                                                                                                                                                                              \n [2] \"Elisabeta Lipă (ROU) (5-2-1)\"                                                                                                                                                                                                                                                                           \n [3] \"Gao Ling (CHN) (2-1-1)\"                                                                                                                                                                                                                                                                                 \n [4] \"Teresa Edwards (USA) (4-0-1)\"                                                                                                                                                                                                                                                                           \n [5] \"László Papp (HUN) (3-0-0) Félix Savón (CUB) (3-0-0) Teófilo Stevenson (CUB) (3-0-0) Roniel Iglesias (CUB) (2-0-1) Boris Lagutin (URS) (2-0-1) Oleg Saitov (RUS) (2-0-1) Zou Shiming (CHN) (2-0-1) Roberto Cammarelle (ITA) (1-1-1) Zbigniew Pietrzykowski (POL) (0-1-2) Arnold Vanderlyde (NED) (0-0-3)\"\n [6] \"Birgit Fischer (GER) (8-4-0)\"                                                                                                                                                                                                                                                                           \n [7] \"Jason Kenny (GBR) (7-2-0)\"                                                                                                                                                                                                                                                                              \n [8] \"Isabell Werth (GER) (7-5-0)\"                                                                                                                                                                                                                                                                            \n [9] \"Edoardo Mangiarotti (ITA) (6-5-2)\"                                                                                                                                                                                                                                                                      \n[10] \"Christie Rampone (USA) (3-1-0)\"                                                                                                                                                                                                                                                                         \n[11] \"Chandler Egan (USA) (1-1-0) Lydia Ko (NZL) (0-1-1) Francis Newton (USA) (0-1-1)\"                                                                                                                                                                                                                        \n[12] \"Larissa Latynina (URS) (9-5-4)\"                                                                                                                                                                                                                                                                         \n[13] \"Andreï Lavrov (RUS) (3-0-1) Oh Seong-ok (KOR) (1-2-1)\"                                                                                                                                                                                                                                                  \n[14] \"Pýrros Dímas (GRE) (3-0-1) Ronny Weller (GER) (1-2-1) Nikolaj Pešalov (BUL, CRO) (1-1-2) Norbert Schemansky (USA) (1-1-2) Eko Yuli Irawan (INA) (0-2-2)\"                                                                                                                                                \n[15] \"Leslie Claudius (IND) (3-1-0) Udham Singh (IND) (3-1-0) Teun de Nooijer (NED) (2-2-0) Luciana Aymar (ARG) (0-2-2)\"                                                                                                                                                                                      \n[16] \"Teddy Riner (FRA) (3-0-2) Ryōko Tani (JPN) (2-2-1)\"                                                                                                                                                                                                                                                     \n[17] \"Wilfried Dietrich (RFA) (1-2-2)\"                                                                                                                                                                                                                                                                        \n[18] \"Michael Phelps (USA) (23-3-2)\"                                                                                                                                                                                                                                                                          \n[19] \"Svetlana Romashina (RUS) (7-0-0)\"                                                                                                                                                                                                                                                                       \n[20] \"Pavel Lednev (URS) (2-2-3)\"                                                                                                                                                                                                                                                                             \n[21] \"Dmitri Sautin (RUS) (2-2-4)\"                                                                                                                                                                                                                                                                            \n[22] \"Hwang Kyung-seon (KOR) (2-0-1) Steven López (USA) (2-0-1) Hadi Saei (IRI) (2-0-1) María Espinoza (MEX) (1-1-1)\"                                                                                                                                                                                         \n[23] \"Venus Williams (USA) (4-1-0) Kitty McKane (GBR) (1-2-2)\"                                                                                                                                                                                                                                                \n[24] \"Ma Long (CHN) (5-0-0) Wang Nan (CHN) (4-1-0) Wang Hao (CHN) (2-3-0)\"                                                                                                                                                                                                                                    \n[25] \"Carl Osburn (USA) (5-4-2)\"                                                                                                                                                                                                                                                                              \n[26] \"Hubert Van Innis (BEL) (6-4-0)\"                                                                                                                                                                                                                                                                         \n[27] \"Jonathan Brownlee (GBR) (1-1-1)\"                                                                                                                                                                                                                                                                        \n[28] \"Ben Ainslie (GBR) (4-1-0) Robert Scheidt (BRA) (2-2-1) Torben Grael (BRA) (2-1-2)\"                                                                                                                                                                                                                      \n[29] \"Ana Fernández (CUB) (3-0-1) Kerri Walsh (USA) (3-0-1) Inna Ryskal (URS) (2-2-0) Sérgio Dutra Santos (BRA) (2-2-0) Sergey Tetyukhin (RUS) (1-1-2)\"                                                                                                                                                       \n[30] \"Dezső Gyarmati (HUN) (3-1-1)\"                                                                                                                                                                                                                                                                           \n\n\n\n\n\nathletes_triees &lt;- gsub(\"\\\\s*\\\\(.*\\\\)\", \"\", athletes)\n\ntop3_athletes &lt;- head(sort(table(athletes_triees), decreasing = TRUE), 3)\n\nprint(top3_athletes)\n\nathletes_triees\nAna Fernández Andreï Lavrov   Ben Ainslie \n            1             1             1 \n\n\n\n\n\n\ntable_medailles &lt;- table(data_medailles_sport_ete$Athletes_medailles)\n\ntable_triee2 &lt;- sort(table_medailles, decreasing = TRUE)\n\ntop3_athletes2 &lt;- names(table_triee2)[1:3]\n\nprint(top3_athletes2)\n\n[1] \"Ana Fernández (CUB) (3-0-1) Kerri Walsh (USA) (3-0-1) Inna Ryskal (URS) (2-2-0) Sérgio Dutra Santos (BRA) (2-2-0) Sergey Tetyukhin (RUS) (1-1-2)\"\n[2] \"Andreï Lavrov (RUS) (3-0-1) Oh Seong-ok (KOR) (1-2-1)\"                                                                                           \n[3] \"Ben Ainslie (GBR) (4-1-0) Robert Scheidt (BRA) (2-2-1) Torben Grael (BRA) (2-1-2)\"                                                               \n\n\nLe top 3 des athlètes est :\n\nAna Fernandez\nAndreï Lavrov\nBen Ainslie\n\n\n\n\n\n\n\n\n\n\n\nPour ce faire, vous implémenterez une fonction extraire_nationalite_athlete qui à partir d’une chaine de charactère extraira le nombre d’athlète et leur nationalité. Par exemple, la chaine de caractère “Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)” donnera en sortie c(“FIN” = 1, “USA” = 1).\nVous utilisez la fonction lapply pour appliquer la fonction à toute la colonne.\nVous agrégerez les résultats de manière à sommer toutes les lignes et à obtenir les 3 nations les plus représentées, et leur effectif.\n\n\n\n\nlibrary(stringr)\nextraire_nationalite_athlete &lt;- function(chaine) {\n  nationalites &lt;- regmatches(chaine, gregexpr(\"\\\\b[A-Z]{3}\\\\b\", chaine, perl=TRUE))[[1]]\n  return(nationalites)\n}\n\nnationalites_list &lt;- unlist(lapply(data_medailles_sport_ete$Athletes_or, extraire_nationalite_athlete))\n\ntop3_nationalites &lt;- head(sort(table(nationalites_list), decreasing = TRUE), 3)\n\nprint(top3_nationalites)\n\nnationalites_list\nUSA CHN CUB \n 20  13   8 \n\n\nLes trois nations les plus représentées pour toutes les épreuves au classement du nombre de médailles d’or individuelles sont les suivantes :\n\nLes États-Unis (USA), avec un total de 20 médailles d’or individuelles\nLa Chine (CHN), qui a remporté 13 médailles d’or individuelles\nCuba (CUB), avec 8 médailles d’or individuelles\n\n\n\n\n\n\n\n\nhiver &lt;- list_tables[[2]]\nprint(hiver)\n\n# A tibble: 16 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;               \n 1 \"Discipline\" Discipline   Années Éditions    épreuves e… Or                  \n 2 \"\"           Biathlon     1924,… 16          11          54                  \n 3 \"\"           Bobsleigh    1924-… 21          3           39                  \n 4 \"\"           Combiné nor… Depui… 22          3           28                  \n 5 \"\"           Curling      1924,… 4           2           7                   \n 6 \"\"           Hockey sur … Été :… 23          2           24                  \n 7 \"\"           Luge         Depui… 14          4           37                  \n 8 \"\"           Patinage ar… Été :… 24          4           77                  \n 9 \"\"           Patinage de… Depui… 22          12          152                 \n10 \"\"           Patinage de… Depui… 7           8           32                  \n11 \"\"           Saut à ski   Depui… 22          4           38                  \n12 \"\"           Skeleton     1924,… 6           2           6                   \n13 \"\"           Ski acrobat… Depui… 7           10          18                  \n14 \"\"           Ski alpin    Depui… 19          10          132                 \n15 \"\"           Ski de fond  Depui… 22          12          134                 \n16 \"\"           Snowboard    Depui… 5           10          14                  \n# ℹ 5 more variables: `médailles décernés` &lt;chr&gt;, `médailles décernés` &lt;chr&gt;,\n#   `médailles décernés` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` &lt;chr&gt;,\n#   `Athlète(s) avec le plus de médailles d'or` &lt;chr&gt;\n\n\n\n\n\nhiver &lt;- hiver[,-1]\ncolnames(hiver) = c(\"Discipline\", \"Annee\", \"Editions\", \"Epreuves_2014\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n\nhiver &lt;- hiver[-1,]\nstr(hiver)\n\ntibble [15 × 10] (S3: tbl_df/tbl/data.frame)\n $ Discipline        : chr [1:15] \"Biathlon\" \"Bobsleigh\" \"Combiné nordique\" \"Curling\" ...\n $ Annee             : chr [1:15] \"1924,Depuis 1960\" \"1924-1956,depuis 1964\" \"Depuis 1924\" \"1924,depuis 1998\" ...\n $ Editions          : chr [1:15] \"16\" \"21\" \"22\" \"4\" ...\n $ Epreuves_2014     : chr [1:15] \"11\" \"3\" \"3\" \"2\" ...\n $ Or                : chr [1:15] \"54\" \"39\" \"28\" \"7\" ...\n $ Argent            : chr [1:15] \"54\" \"37\" \"28\" \"7\" ...\n $ Bronze            : chr [1:15] \"54\" \"39\" \"28\" \"7\" ...\n $ Total             : chr [1:15] \"162\" \"115\" \"84\" \"21\" ...\n $ Athletes_medailles: chr [1:15] \"Ole Einar Bjørndalen (NOR) (8-4-1)\" \"Bogdan Musiol (RDA) (1-5-1)\" \"Felix Gottwald (AUT) (3-1-3)\" \"Anna Le Moine (SWE) (2-0-0) Cathrine Lindahl (SWE) (2-0-0) Eva Lund (SWE) (2-0-0) Anette Norberg (SWE) (2-0-0)\\\"| __truncated__ ...\n $ Athletes_or       : chr [1:15] \"Ole Einar Bjørndalen (NOR) (8-4-1)\" \"Kevin Kuske (GER) (4-1-0) André Lange (GER) (4-1-0)\" \"Samppa Lajunen (FIN) (3-2-0)\\n Eric Frenzel (GER) (3-1-2)\\n Felix Gottwald (AUT) (3-1-3) Johan Grøttumsbråten (\"| __truncated__ \"Anna Le Moine (SWE) (2-0-0) Cathrine Lindahl (SWE) (2-0-0) Eva Lund (SWE) (2-0-0) Anette Norberg (SWE) (2-0-0)\\\"| __truncated__ ...\n\nlibrary(dplyr)\nhiver &lt;- hiver |&gt; \n  mutate(Editions = as.integer(Editions),\n         Epreuves_2014 = as.integer(Epreuves_2014),\n         Or = as.integer(Or),\n         Argent = as.integer(Argent),\n         Bronze = as.integer(Bronze),\n         Total = as.integer(Total))\n\nprint(hiver)\n\n# A tibble: 15 × 10\n   Discipline             Annee Editions Epreuves_2014    Or Argent Bronze Total\n   &lt;chr&gt;                  &lt;chr&gt;    &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n 1 Biathlon               1924…       16            11    54     54     54   162\n 2 Bobsleigh              1924…       21             3    39     37     39   115\n 3 Combiné nordique       Depu…       22             3    28     28     28    84\n 4 Curling                1924…        4             2     7      7      7    21\n 5 Hockey sur glace       Été …       23             2    24     24     24    72\n 6 Luge                   Depu…       14             4    37     35     36   108\n 7 Patinage artistique    Été …       24             4    77     75     76   228\n 8 Patinage de vitesse    Depu…       22            12   152    155    148   455\n 9 Patinage de vitesse s… Depu…        7             8    32     32     32    96\n10 Saut à ski             Depu…       22             4    38     39     37   114\n11 Skeleton               1924…        6             2     6      6      6    18\n12 Ski acrobatique        Depu…        7            10    18     18     18    54\n13 Ski alpin              Depu…       19            10   132    135    130   397\n14 Ski de fond            Depu…       22            12   134    132    133   399\n15 Snowboard              Depu…        5            10    14     14     14    42\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\nstr(hiver)\n\ntibble [15 × 10] (S3: tbl_df/tbl/data.frame)\n $ Discipline        : chr [1:15] \"Biathlon\" \"Bobsleigh\" \"Combiné nordique\" \"Curling\" ...\n $ Annee             : chr [1:15] \"1924,Depuis 1960\" \"1924-1956,depuis 1964\" \"Depuis 1924\" \"1924,depuis 1998\" ...\n $ Editions          : int [1:15] 16 21 22 4 23 14 24 22 7 22 ...\n $ Epreuves_2014     : int [1:15] 11 3 3 2 2 4 4 12 8 4 ...\n $ Or                : int [1:15] 54 39 28 7 24 37 77 152 32 38 ...\n $ Argent            : int [1:15] 54 37 28 7 24 35 75 155 32 39 ...\n $ Bronze            : int [1:15] 54 39 28 7 24 36 76 148 32 37 ...\n $ Total             : int [1:15] 162 115 84 21 72 108 228 455 96 114 ...\n $ Athletes_medailles: chr [1:15] \"Ole Einar Bjørndalen (NOR) (8-4-1)\" \"Bogdan Musiol (RDA) (1-5-1)\" \"Felix Gottwald (AUT) (3-1-3)\" \"Anna Le Moine (SWE) (2-0-0) Cathrine Lindahl (SWE) (2-0-0) Eva Lund (SWE) (2-0-0) Anette Norberg (SWE) (2-0-0)\\\"| __truncated__ ...\n $ Athletes_or       : chr [1:15] \"Ole Einar Bjørndalen (NOR) (8-4-1)\" \"Kevin Kuske (GER) (4-1-0) André Lange (GER) (4-1-0)\" \"Samppa Lajunen (FIN) (3-2-0)\\n Eric Frenzel (GER) (3-1-2)\\n Felix Gottwald (AUT) (3-1-3) Johan Grøttumsbråten (\"| __truncated__ \"Anna Le Moine (SWE) (2-0-0) Cathrine Lindahl (SWE) (2-0-0) Eva Lund (SWE) (2-0-0) Anette Norberg (SWE) (2-0-0)\\\"| __truncated__ ...\n\n\n\ncalcul_medailles_individuelles_purrr &lt;- function(data_frame) {\n    medailles_df &lt;- data.frame(\n      Athlete = gsub(\"[file://\\\\s*\\\\(.*\\\\]\\\\s*\\\\(.*\\\\)\", \"\", data_frame$Athletes_medailles),\n      Pays = gsub(\".*\\\\((\\\\w+)\\\\)\", \"\\\\1\", data_frame$Athletes_medailles),\n      OR = as.integer(gsub(\".*\\\\((\\\\d+)-\\\\d+-\\\\d+\\\\)\", \"\\\\1\", data_frame$Athletes_medailles)),\n      ARGENT = as.integer(gsub(\".*\\\\(\\\\d+-(\\\\d+)-\\\\d+\\\\)\", \"\\\\1\", data_frame$Athletes_medailles)),\n      BRONZE = as.integer(gsub(\".*\\\\(\\\\d+-\\\\d+-(\\\\d+)\\\\)\", \"\\\\1\", data_frame$Athletes_medailles))\n    )\n   \n    medailles_df$TotalMedailles &lt;- medailles_df$OR + medailles_df$ARGENT + medailles_df$BRONZE\n   \n    classement_df &lt;- medailles_df[order(-medailles_df$TotalMedailles, -medailles_df$OR, -medailles_df$ARGENT, -medailles_df$BRONZE), ]\n   \n    meilleurs_athletes &lt;- head(classement_df$Athlete, 3)\n   \n    phrase &lt;- cat(\"Les 3 meilleurs athlètes sont :\\n\", paste(\"- \", meilleurs_athletes, collapse = \"\\n\"))\n   \n    return(phrase)\n}\ncalcul_medailles_individuelles_purrr(hiver)\n\nLes 3 meilleurs athlètes sont :\n -  Marit Bjørgen (NOR) (8-4-3)\n-  Ole Einar Bjørndalen (NOR) (8-4-1)\n-  Ireen Wüst (NED) (5-5-1)\n\n\nNULL\n\n\nLes trois meilleurs athlètes sont donc :\n\nMarit Bjørgen (NOR)\nOle Einar Bjørndalen (NOR)\nIreen Wüst (NED)\n\n\nextraire_nationalite_athlete &lt;- function(chaine) {\n  nationalites &lt;- regmatches(chaine, gregexpr(\"\\\\b[A-Z]{3}\\\\b\", chaine, perl=TRUE))[[1]]\n  return(nationalites)\n}\n\nnationalites_list &lt;- map(hiver$Athletes_or, extraire_nationalite_athlete) |&gt; \n  flatten_chr()\n\ntop3_nationalites &lt;- nationalites_list |&gt; \n  table() |&gt; \n  sort(decreasing = TRUE) |&gt; \n  head(3)\n\nprint(top3_nationalites)\n\nnationalites_list\nCAN NOR GER \n  8   7   6 \n\n\nLes trois nations les plus représentées pour toutes les épreuves au classement du nombre de médailles d’or individuelles sont les suivantes :\n\nLe Canada, avec un total de 8 médailles d’or individuelles\nLa Norvège, qui compte 7 médailles d’or individuelles\nL’Allemagne, avec 6 médailles d’or individuelles\n\nLa fonction purr semble offrir une syntaxe plus cohérente, plus lisible et flexible pour appliquer des opérations sur des listes. Les résultats sont différents des précédents."
  },
  {
    "objectID": "posts/post-with-code/Exercice3.html",
    "href": "posts/post-with-code/Exercice3.html",
    "title": "Exercices - Semaine 3",
    "section": "",
    "text": "Démarrez un nouveau projet rstudio intitulé TP3. Nous allons avoir besoin de plusieurs librairies aujourd’hui. Installez les en utilisant la commande suivante:\ninstall.packages(c(“stringr”, “lubridate”, “arrow”, “dplyr”, “tidyr”, “jsonlite”, “RSQLite”))\nÀ la racine du projet, créez un dossier data. Téléchargez les données associées au TP3 et décompressez les dans le dossier data. Supprimez le fichier .zip.\n\n\n#install.packages(c(\"stringr\", \"lubridate\", \"arrow\", \"dplyr\", \"tidyr\", \"jsonlite\", \"RSQLite\"))\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(arrow)\nlibrary(tidyr)\nlibrary(jsonlite)\nlibrary(RSQLite)\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata &lt;- list.files(\"data\")\nprint(data)\n\ncharacter(0)\n\nextensions &lt;- tools::file_ext(data)\nprint(extensions)\n\nlogical(0)\n\n\nIl y a 3 fichiers dans le dossier data dont un sous format sqlite, un autre json et le dernier parquet.\n\n\n\n\n\n\n\ntokyo &lt;- read_parquet(\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/tokyo_athletes.parquet\")\ndim(tokyo)\n\n[1] 11085     3\n\nsummary(tokyo)\n\n     Name               NOC             Discipline       \n Length:11085       Length:11085       Length:11085      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n\n\nLa table Tokyo compte 11 085 entrées et est structurée en 3 colonnes.\nLes 3 colonnes présentes sont : Name, NOC et Discipline.\n\n\n\n\n\n\n\nolympics &lt;- read_json(\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/olympics_athletes.json\")\ndim(olympics)\n\nNULL\n\n#str(olympics)\nnames(olympics)\n\nNULL\n\n\n\nlength(olympics)\n\n[1] 269731\n\n\nIl y a un total de 269 731 éléments dans l’objet “olympics”.\nLes colonnes présentes sont les suivantes :\n\n\nID\nName\nSex\nAge\nHeight\nWeight\nTeam\nNOC\nGames\nCity\nSport\nEvent\nMedal\n\n\n\n\n\n\n\n\nconnexion &lt;- dbConnect(drv=RSQLite::SQLite(), dbname=\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/data.sqlite\")\ntable &lt;- dbListTables(connexion)\ntable\n\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n\n\n\n\n\n\n\n\n\nif (dbIsValid(connexion)) {\n  \n  file_olympics &lt;- \"/Users/ameldahmani/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/olympics_athletes.json\"\n  file_tokyo &lt;- \"/Users/ameldahmani/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/tokyo_athletes.parquet\"\n  \n  tryCatch({\n    # Chargement des données json avec read_json\n    data_olympics &lt;- read_json(file_olympics, simplifyVector = TRUE)\n    \n    #Convertion des données as.data.frame \n   \n   data_olympics_df &lt;- as.data.frame(data_olympics)\n    \n    #dbWriteTable avec append=TRUE pour ajouter à la table déjà existante\n  dbWriteTable(connexion, \"olympics_athletes\", data_olympics_df, append = TRUE)\n    \n    #dbWriteTable avec overwrite=TRUE pour écraser la table existante\n  dbWriteTable(connexion, \"tokyo_athletes\", read_parquet(file_tokyo), overwrite = TRUE)\n  }, error = function(e) {\n    cat(\"Erreur lors de la lecture du fichier JSON :\", conditionMessage(e), \"\\n\")\n  })\n  \n} else {\n  cat(\"Erreur, la connexion à la base de données a échoué.\")\n}\n\n\n\n\n\n\n\n\nif (dbIsValid(connexion)) {\n  colonnes_olympics &lt;- dbListFields(connexion, \"olympics_athletes\")\n  print(colonnes_olympics)\n} else {\n  cat(\"Erreur, la connexion à la base de données a échoué.\")\n}\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\nLes colonnes de la table sont les suivantes :\n- ID\n- Name\n- Sex\n- Age\n- Height\n- Weight\n- Team\n- NOC\n- Games\n- City\n- Sport\n- Event\n- Medal\n\n\n\n\n\n\n\n\n\n\nif (dbIsValid(connexion)) {\n  \n  nomdelatable &lt;- \"olympics_athletes\"\n  \n  table_importee &lt;- dbReadTable(connexion, nomdelatable)\n  \n  tibbleresultat &lt;- as_tibble(table_importee)\n  \n  print(tibbleresultat)\n  \n} else {\n  cat(\"Erreur, la connexion à la base de données a échoué.\")\n}\n\n# A tibble: 1,348,655 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   &lt;int&gt; &lt;chr&gt;     &lt;chr&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 1 more variable: Medal &lt;chr&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntibbleresultat &lt;- tibbleresultat|&gt; \n  mutate(Sex = as.factor(Sex))\nprint(tibbleresultat)\n\n# A tibble: 1,348,655 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   &lt;int&gt; &lt;chr&gt;     &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 1 more variable: Medal &lt;chr&gt;\n\nstr(tibbleresultat)\n\ntibble [1,348,655 × 13] (S3: tbl_df/tbl/data.frame)\n $ ID    : int [1:1348655] 1 2 3 4 5 5 5 5 5 5 ...\n $ Name  : chr [1:1348655] \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex   : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 1 1 1 1 1 1 ...\n $ Age   : int [1:1348655] 24 23 24 34 21 21 25 25 27 27 ...\n $ Height: int [1:1348655] 180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight: num [1:1348655] 80 60 NA NA 82 82 82 82 82 82 ...\n $ Team  : chr [1:1348655] \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC   : chr [1:1348655] \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Games : chr [1:1348655] \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" ...\n $ City  : chr [1:1348655] \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport : chr [1:1348655] \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event : chr [1:1348655] \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal : chr [1:1348655] NA NA NA \"Gold\" ...\n\n\nLa colonne Sex a bien été convertie en variable catégorielle.\n\n\n\n\n\n\n\ntibbleresultat &lt;- tibbleresultat |&gt; \n  separate(Games, into = c(\"Year\", \"isSummer\"), sep = \" \", convert = TRUE)\nprint(tibbleresultat)\n\n# A tibble: 1,348,655 × 14\n      ID Name   Sex     Age Height Weight Team  NOC    Year isSummer City  Sport\n   &lt;int&gt; &lt;chr&gt;  &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dij… M        24    180     80 China CHN    1992 Summer   Barc… Bask…\n 2     2 A Lam… M        23    170     60 China CHN    2012 Summer   Lond… Judo \n 3     3 Gunna… M        24     NA     NA Denm… DEN    1920 Summer   Antw… Foot…\n 4     4 Edgar… M        34     NA     NA Denm… DEN    1900 Summer   Paris Tug-…\n 5     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 6     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 7     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 8     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 9     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n10     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 2 more variables: Event &lt;chr&gt;, Medal &lt;chr&gt;\n\ntibbleresultat\n\n# A tibble: 1,348,655 × 14\n      ID Name   Sex     Age Height Weight Team  NOC    Year isSummer City  Sport\n   &lt;int&gt; &lt;chr&gt;  &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dij… M        24    180     80 China CHN    1992 Summer   Barc… Bask…\n 2     2 A Lam… M        23    170     60 China CHN    2012 Summer   Lond… Judo \n 3     3 Gunna… M        24     NA     NA Denm… DEN    1920 Summer   Antw… Foot…\n 4     4 Edgar… M        34     NA     NA Denm… DEN    1900 Summer   Paris Tug-…\n 5     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 6     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 7     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 8     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 9     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n10     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 2 more variables: Event &lt;chr&gt;, Medal &lt;chr&gt;\n\n\nLes colonnes Year et isSummer ont bien été crées.\n\n\n\n\n\n\n\n\n\n\nMoyenne_age &lt;- tibbleresultat |&gt; \n  group_by(Year) |&gt; \n  summarise(moyenne_age = mean(Age, na.rm = TRUE))\nprint(Moyenne_age)\n\n# A tibble: 35 × 2\n    Year moyenne_age\n   &lt;int&gt;       &lt;dbl&gt;\n 1  1896        23.6\n 2  1900        28.9\n 3  1904        26.7\n 4  1906        27.1\n 5  1908        27.0\n 6  1912        27.5\n 7  1920        29.3\n 8  1924        28.0\n 9  1928        27.9\n10  1932        29.6\n# ℹ 25 more rows\n\n\n\n\n\nplusjeunes &lt;- Moyenne_age |&gt; \n  filter(moyenne_age == min(moyenne_age, na.rm = TRUE))\nprint(plusjeunes)\n\n# A tibble: 1 × 2\n   Year moyenne_age\n  &lt;int&gt;       &lt;dbl&gt;\n1  1896        23.6\n\n\nL’édition de 1896 a présenté les athlètes les plus jeunes, avec une moyenne d’âge de 23,6 ans.\n\n\n\n\nplusvieux &lt;- Moyenne_age |&gt;  \n  filter(moyenne_age == max(moyenne_age, na.rm = TRUE))\nprint(plusvieux)\n\n# A tibble: 1 × 2\n   Year moyenne_age\n  &lt;int&gt;       &lt;dbl&gt;\n1  1932        29.6\n\n\nL’édition de 1932 a accueilli les athlètes les plus âgés, avec une moyenne d’âge de 29,6 ans.\n\n\n\n\n\n\n\n\n\n\nathletes_femmes &lt;- tibbleresultat |&gt; \n  filter(Sex == \"F\")\n\nathletes_femmes &lt;- athletes_femmes |&gt; \n  mutate(Height = ifelse(is.na(Height), 0, Height))\n\nplus_grande_taille_par_discipline &lt;- athletes_femmes |&gt; \n  group_by(Sport, Year, .groups = \"drop_last\") |&gt; \n  summarise(taille_max = max(Height, na.rm = TRUE), .groups = \"drop_last\")\n\nplus_grande_taille_discipline_par_annee &lt;- plus_grande_taille_par_discipline |&gt; \n  group_by(Year, .groups = \"drop_last\") |&gt; \n  filter(taille_max == max(taille_max, na.rm = TRUE), .groups == \"drop_last\")\n\ndiscipline_plus_grande_frequence &lt;- plus_grande_taille_discipline_par_annee |&gt; \n  group_by(Sport, .groups = \"drop_last\") |&gt; \n  summarise(frequence = n(), .groups = \"drop_last\")\nprint(\"Discipline des JO d'été avec la plus grande taille d'athlètes féminines par année :\")\n\n[1] \"Discipline des JO d'été avec la plus grande taille d'athlètes féminines par année :\"\n\n\n\n\n\n\nlibrary(dplyr)\n\ndiscipline_plus_grande_frequence2 &lt;- plus_grande_taille_discipline_par_annee |&gt; \n  group_by(Sport) |&gt; \n  summarise(frequence = n()) |&gt; \n  arrange(desc(frequence)) |&gt; \n  distinct()\n\nLa deuxième méthode permet de classer les disciplines par fréquence, assurant ainsi que la discipline la plus fréquente apparaîtra en premier.\n\nprint(plus_grande_taille_discipline_par_annee, n = 60)\n\n# A tibble: 48 × 4\n# Groups:   Year, .groups [34]\n   Sport           Year .groups   taille_max\n   &lt;chr&gt;          &lt;int&gt; &lt;chr&gt;          &lt;dbl&gt;\n 1 Archery         1904 drop_last          0\n 2 Archery         1908 drop_last          0\n 3 Athletics       1948 drop_last        180\n 4 Athletics       1952 drop_last        188\n 5 Athletics       1956 drop_last        185\n 6 Athletics       1964 drop_last        188\n 7 Athletics       1968 drop_last        188\n 8 Athletics       1972 drop_last        190\n 9 Basketball      1976 drop_last        210\n10 Basketball      1980 drop_last        210\n11 Basketball      1984 drop_last        205\n12 Basketball      1988 drop_last        204\n13 Basketball      1992 drop_last        204\n14 Basketball      1996 drop_last        204\n15 Basketball      2000 drop_last        213\n16 Basketball      2004 drop_last        202\n17 Basketball      2008 drop_last        202\n18 Basketball      2012 drop_last        206\n19 Basketball      2016 drop_last        203\n20 Bobsleigh       2002 drop_last        187\n21 Bobsleigh       2006 drop_last        187\n22 Bobsleigh       2010 drop_last        194\n23 Croquet         1900 drop_last          0\n24 Diving          1912 drop_last          0\n25 Diving          1920 drop_last        175\n26 Equestrianism   1900 drop_last          0\n27 Fencing         1924 drop_last        175\n28 Fencing         1928 drop_last        183\n29 Fencing         1932 drop_last        183\n30 Fencing         1936 drop_last        183\n31 Figure Skating  1908 drop_last          0\n32 Golf            1900 drop_last          0\n33 Ice Hockey      2014 drop_last        186\n34 Luge            1994 drop_last        187\n35 Luge            1998 drop_last        187\n36 Motorboating    1908 drop_last          0\n37 Sailing         1900 drop_last          0\n38 Sailing         1908 drop_last          0\n39 Swimming        1912 drop_last          0\n40 Swimming        1960 drop_last        186\n41 Tennis          1900 drop_last          0\n42 Tennis          1906 drop_last          0\n43 Tennis          1908 drop_last          0\n44 Tennis          1912 drop_last          0\n45 Tennis          1924 drop_last        175\n46 Volleyball      1964 drop_last        188\n47 Volleyball      2004 drop_last        202\n48 Volleyball      2008 drop_last        202\n\n\nLa plus grande taille par discipline est observée dans le basketball, atteignant 213 cm.\n\nprint(discipline_plus_grande_frequence)\n\n# A tibble: 17 × 3\n# Groups:   Sport [17]\n   Sport          .groups   frequence\n   &lt;chr&gt;          &lt;chr&gt;         &lt;int&gt;\n 1 Archery        drop_last         2\n 2 Athletics      drop_last         6\n 3 Basketball     drop_last        11\n 4 Bobsleigh      drop_last         3\n 5 Croquet        drop_last         1\n 6 Diving         drop_last         2\n 7 Equestrianism  drop_last         1\n 8 Fencing        drop_last         4\n 9 Figure Skating drop_last         1\n10 Golf           drop_last         1\n11 Ice Hockey     drop_last         1\n12 Luge           drop_last         2\n13 Motorboating   drop_last         1\n14 Sailing        drop_last         2\n15 Swimming       drop_last         2\n16 Tennis         drop_last         5\n17 Volleyball     drop_last         3\n\nprint(discipline_plus_grande_frequence2)\n\n# A tibble: 17 × 2\n   Sport          frequence\n   &lt;chr&gt;              &lt;int&gt;\n 1 Basketball            11\n 2 Athletics              6\n 3 Tennis                 5\n 4 Fencing                4\n 5 Bobsleigh              3\n 6 Volleyball             3\n 7 Archery                2\n 8 Diving                 2\n 9 Luge                   2\n10 Sailing                2\n11 Swimming               2\n12 Croquet                1\n13 Equestrianism          1\n14 Figure Skating         1\n15 Golf                   1\n16 Ice Hockey             1\n17 Motorboating           1\n\n\nSur l’ensemble des éditions, le basketball a été la discipline avec les plus grandes athlètes féminines à 11 reprises.\n\n\n\n\n\n\n\n\ntexte &lt;- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\"\n\n\n\n\n\n\nVous disposez du texte suivant :\nLes jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\n\n\n\n\n\n\n\n\nformat_date &lt;- \"\\\\b\\\\d{1,2} (Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre) \\\\d{4}\\\\b\"\n\ndatesJO &lt;- str_extract_all(texte, format_date)[[1]]\nprint(datesJO)\n\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n\n\nLes dates mentionnées ci-dessus correspondent aux différentes éditions des Jeux Olympiques.\n\n\n\n\n\n\nmois_num &lt;- function(mois) {\n  mois &lt;- tolower(mois)\n  mois_num &lt;- c(\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\")\n  return(match(mois, mois_num))\n}\n\ndates_num &lt;- str_replace_all(datesJO, format_date, function(match) {\n  elements &lt;- str_split(match, \" \")[[1]]\n  elements[2] &lt;- mois_num(elements[2])\n  return(paste(elements, collapse = \" \"))\n})\n\nprint(dates_num)\n\n[1] \"5 8 2016\"  \"20 8 2016\" \"23 7 2021\" \"8 8 2021\"  \"26 7 2024\" \"11 8 2024\"\n\n\nLe remplacement des noms des mois par leur numéro a bien fonctionné.\n\n\n\n\n\n\n\nconvertion &lt;- function(date_texte) {\n  elements &lt;- str_split(date_texte, \" \")[[1]]\n  jour &lt;- as.integer(elements[1])\n  mois &lt;- as.integer(elements[2])\n  annee &lt;- as.integer(elements[3])\n  return(dmy(paste(jour, mois, annee, sep = \"-\")))\n}\n\ndates_converties &lt;- sapply(dates_num, convertion)\ndates_converties\n\n 5 8 2016 20 8 2016 23 7 2021  8 8 2021 26 7 2024 11 8 2024 \n    17018     17033     18831     18847     19930     19946 \n\n\nLa conversion a également bien fonctionné.\n\n\n\n\n\n\n\n\n\n\nlibrary(lubridate)\nParisDate &lt;- dmy(\"26 Juillet 2024\", locale = \"fr_FR\")\nTokyoDate &lt;- dmy(\"23 Juillet 2021\", locale = \"fr_FR\")\nRioDate &lt;- dmy(\"5 Août 2016\", locale = \"fr_FR\")\n\n\n\n\nRio_Tokyo_jours &lt;- as.numeric(difftime(TokyoDate, RioDate, units = \"days\"))\ncat(\"Nombre de jours entre Rio et Tokyo :\", Rio_Tokyo_jours, \"jours\\n\")\n\nNombre de jours entre Rio et Tokyo : 1813 jours\n\n\n1 813 jours séparent les éditions de Rio en 2016 et de Tokyo en 2021.\n\n\n\n\nTokyo_Paris_jours &lt;- as.numeric(difftime(ParisDate, TokyoDate, units = \"days\"))\ncat(\"Nombre de jours entre Tokyo et Paris :\", Tokyo_Paris_jours, \"jours\\n\")\n\nNombre de jours entre Tokyo et Paris : 1099 jours\n\n\n1 099 jours séparent les éditions de Tokyo en 2021 et de Paris en 2024.\n\n\n\n\nRio_Tokyo_semaines &lt;- as.numeric(difftime(TokyoDate, RioDate, units = \"weeks\"))\n\ncat(\"Nombre de semaines entre Rio et Tokyo :\", Rio_Tokyo_semaines, \"semaines\\n\")\n\nNombre de semaines entre Rio et Tokyo : 259 semaines\n\n\n259 semaines séparent les éditions de Rio en 2016 et de Tokyo en 2021.\n\n\n\n\nTokyo_Paris_semaines &lt;- as.numeric(difftime(ParisDate, TokyoDate, units = \"weeks\"))\n\ncat(\"Nombre de semaines entre Tokyo et Paris :\", Tokyo_Paris_semaines, \"semaines\\n\")\n\nNombre de semaines entre Tokyo et Paris : 157 semaines\n\n\n157 semaines séparent les éditions de Tokyo en 2021 et de Paris en 2024."
  },
  {
    "objectID": "posts/post-with-code/Exercice3.html#exercices---semaine-3",
    "href": "posts/post-with-code/Exercice3.html#exercices---semaine-3",
    "title": "Exercices - Semaine 3",
    "section": "",
    "text": "Démarrez un nouveau projet rstudio intitulé TP3. Nous allons avoir besoin de plusieurs librairies aujourd’hui. Installez les en utilisant la commande suivante:\ninstall.packages(c(“stringr”, “lubridate”, “arrow”, “dplyr”, “tidyr”, “jsonlite”, “RSQLite”))\nÀ la racine du projet, créez un dossier data. Téléchargez les données associées au TP3 et décompressez les dans le dossier data. Supprimez le fichier .zip.\n\n\n#install.packages(c(\"stringr\", \"lubridate\", \"arrow\", \"dplyr\", \"tidyr\", \"jsonlite\", \"RSQLite\"))\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(arrow)\nlibrary(tidyr)\nlibrary(jsonlite)\nlibrary(RSQLite)\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata &lt;- list.files(\"data\")\nprint(data)\n\ncharacter(0)\n\nextensions &lt;- tools::file_ext(data)\nprint(extensions)\n\nlogical(0)\n\n\nIl y a 3 fichiers dans le dossier data dont un sous format sqlite, un autre json et le dernier parquet.\n\n\n\n\n\n\n\ntokyo &lt;- read_parquet(\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/tokyo_athletes.parquet\")\ndim(tokyo)\n\n[1] 11085     3\n\nsummary(tokyo)\n\n     Name               NOC             Discipline       \n Length:11085       Length:11085       Length:11085      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n\n\nLa table Tokyo compte 11 085 entrées et est structurée en 3 colonnes.\nLes 3 colonnes présentes sont : Name, NOC et Discipline.\n\n\n\n\n\n\n\nolympics &lt;- read_json(\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/olympics_athletes.json\")\ndim(olympics)\n\nNULL\n\n#str(olympics)\nnames(olympics)\n\nNULL\n\n\n\nlength(olympics)\n\n[1] 269731\n\n\nIl y a un total de 269 731 éléments dans l’objet “olympics”.\nLes colonnes présentes sont les suivantes :\n\n\nID\nName\nSex\nAge\nHeight\nWeight\nTeam\nNOC\nGames\nCity\nSport\nEvent\nMedal\n\n\n\n\n\n\n\n\nconnexion &lt;- dbConnect(drv=RSQLite::SQLite(), dbname=\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/data.sqlite\")\ntable &lt;- dbListTables(connexion)\ntable\n\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n\n\n\n\n\n\n\n\n\nif (dbIsValid(connexion)) {\n  \n  file_olympics &lt;- \"/Users/ameldahmani/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/olympics_athletes.json\"\n  file_tokyo &lt;- \"/Users/ameldahmani/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/tokyo_athletes.parquet\"\n  \n  tryCatch({\n    # Chargement des données json avec read_json\n    data_olympics &lt;- read_json(file_olympics, simplifyVector = TRUE)\n    \n    #Convertion des données as.data.frame \n   \n   data_olympics_df &lt;- as.data.frame(data_olympics)\n    \n    #dbWriteTable avec append=TRUE pour ajouter à la table déjà existante\n  dbWriteTable(connexion, \"olympics_athletes\", data_olympics_df, append = TRUE)\n    \n    #dbWriteTable avec overwrite=TRUE pour écraser la table existante\n  dbWriteTable(connexion, \"tokyo_athletes\", read_parquet(file_tokyo), overwrite = TRUE)\n  }, error = function(e) {\n    cat(\"Erreur lors de la lecture du fichier JSON :\", conditionMessage(e), \"\\n\")\n  })\n  \n} else {\n  cat(\"Erreur, la connexion à la base de données a échoué.\")\n}\n\n\n\n\n\n\n\n\nif (dbIsValid(connexion)) {\n  colonnes_olympics &lt;- dbListFields(connexion, \"olympics_athletes\")\n  print(colonnes_olympics)\n} else {\n  cat(\"Erreur, la connexion à la base de données a échoué.\")\n}\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\nLes colonnes de la table sont les suivantes :\n- ID\n- Name\n- Sex\n- Age\n- Height\n- Weight\n- Team\n- NOC\n- Games\n- City\n- Sport\n- Event\n- Medal\n\n\n\n\n\n\n\n\n\n\nif (dbIsValid(connexion)) {\n  \n  nomdelatable &lt;- \"olympics_athletes\"\n  \n  table_importee &lt;- dbReadTable(connexion, nomdelatable)\n  \n  tibbleresultat &lt;- as_tibble(table_importee)\n  \n  print(tibbleresultat)\n  \n} else {\n  cat(\"Erreur, la connexion à la base de données a échoué.\")\n}\n\n# A tibble: 1,348,655 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   &lt;int&gt; &lt;chr&gt;     &lt;chr&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 1 more variable: Medal &lt;chr&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntibbleresultat &lt;- tibbleresultat|&gt; \n  mutate(Sex = as.factor(Sex))\nprint(tibbleresultat)\n\n# A tibble: 1,348,655 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   &lt;int&gt; &lt;chr&gt;     &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 1 more variable: Medal &lt;chr&gt;\n\nstr(tibbleresultat)\n\ntibble [1,348,655 × 13] (S3: tbl_df/tbl/data.frame)\n $ ID    : int [1:1348655] 1 2 3 4 5 5 5 5 5 5 ...\n $ Name  : chr [1:1348655] \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex   : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 1 1 1 1 1 1 ...\n $ Age   : int [1:1348655] 24 23 24 34 21 21 25 25 27 27 ...\n $ Height: int [1:1348655] 180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight: num [1:1348655] 80 60 NA NA 82 82 82 82 82 82 ...\n $ Team  : chr [1:1348655] \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC   : chr [1:1348655] \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Games : chr [1:1348655] \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" ...\n $ City  : chr [1:1348655] \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport : chr [1:1348655] \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event : chr [1:1348655] \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal : chr [1:1348655] NA NA NA \"Gold\" ...\n\n\nLa colonne Sex a bien été convertie en variable catégorielle.\n\n\n\n\n\n\n\ntibbleresultat &lt;- tibbleresultat |&gt; \n  separate(Games, into = c(\"Year\", \"isSummer\"), sep = \" \", convert = TRUE)\nprint(tibbleresultat)\n\n# A tibble: 1,348,655 × 14\n      ID Name   Sex     Age Height Weight Team  NOC    Year isSummer City  Sport\n   &lt;int&gt; &lt;chr&gt;  &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dij… M        24    180     80 China CHN    1992 Summer   Barc… Bask…\n 2     2 A Lam… M        23    170     60 China CHN    2012 Summer   Lond… Judo \n 3     3 Gunna… M        24     NA     NA Denm… DEN    1920 Summer   Antw… Foot…\n 4     4 Edgar… M        34     NA     NA Denm… DEN    1900 Summer   Paris Tug-…\n 5     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 6     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 7     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 8     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 9     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n10     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 2 more variables: Event &lt;chr&gt;, Medal &lt;chr&gt;\n\ntibbleresultat\n\n# A tibble: 1,348,655 × 14\n      ID Name   Sex     Age Height Weight Team  NOC    Year isSummer City  Sport\n   &lt;int&gt; &lt;chr&gt;  &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dij… M        24    180     80 China CHN    1992 Summer   Barc… Bask…\n 2     2 A Lam… M        23    170     60 China CHN    2012 Summer   Lond… Judo \n 3     3 Gunna… M        24     NA     NA Denm… DEN    1920 Summer   Antw… Foot…\n 4     4 Edgar… M        34     NA     NA Denm… DEN    1900 Summer   Paris Tug-…\n 5     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 6     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 7     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 8     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 9     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n10     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 2 more variables: Event &lt;chr&gt;, Medal &lt;chr&gt;\n\n\nLes colonnes Year et isSummer ont bien été crées.\n\n\n\n\n\n\n\n\n\n\nMoyenne_age &lt;- tibbleresultat |&gt; \n  group_by(Year) |&gt; \n  summarise(moyenne_age = mean(Age, na.rm = TRUE))\nprint(Moyenne_age)\n\n# A tibble: 35 × 2\n    Year moyenne_age\n   &lt;int&gt;       &lt;dbl&gt;\n 1  1896        23.6\n 2  1900        28.9\n 3  1904        26.7\n 4  1906        27.1\n 5  1908        27.0\n 6  1912        27.5\n 7  1920        29.3\n 8  1924        28.0\n 9  1928        27.9\n10  1932        29.6\n# ℹ 25 more rows\n\n\n\n\n\nplusjeunes &lt;- Moyenne_age |&gt; \n  filter(moyenne_age == min(moyenne_age, na.rm = TRUE))\nprint(plusjeunes)\n\n# A tibble: 1 × 2\n   Year moyenne_age\n  &lt;int&gt;       &lt;dbl&gt;\n1  1896        23.6\n\n\nL’édition de 1896 a présenté les athlètes les plus jeunes, avec une moyenne d’âge de 23,6 ans.\n\n\n\n\nplusvieux &lt;- Moyenne_age |&gt;  \n  filter(moyenne_age == max(moyenne_age, na.rm = TRUE))\nprint(plusvieux)\n\n# A tibble: 1 × 2\n   Year moyenne_age\n  &lt;int&gt;       &lt;dbl&gt;\n1  1932        29.6\n\n\nL’édition de 1932 a accueilli les athlètes les plus âgés, avec une moyenne d’âge de 29,6 ans.\n\n\n\n\n\n\n\n\n\n\nathletes_femmes &lt;- tibbleresultat |&gt; \n  filter(Sex == \"F\")\n\nathletes_femmes &lt;- athletes_femmes |&gt; \n  mutate(Height = ifelse(is.na(Height), 0, Height))\n\nplus_grande_taille_par_discipline &lt;- athletes_femmes |&gt; \n  group_by(Sport, Year, .groups = \"drop_last\") |&gt; \n  summarise(taille_max = max(Height, na.rm = TRUE), .groups = \"drop_last\")\n\nplus_grande_taille_discipline_par_annee &lt;- plus_grande_taille_par_discipline |&gt; \n  group_by(Year, .groups = \"drop_last\") |&gt; \n  filter(taille_max == max(taille_max, na.rm = TRUE), .groups == \"drop_last\")\n\ndiscipline_plus_grande_frequence &lt;- plus_grande_taille_discipline_par_annee |&gt; \n  group_by(Sport, .groups = \"drop_last\") |&gt; \n  summarise(frequence = n(), .groups = \"drop_last\")\nprint(\"Discipline des JO d'été avec la plus grande taille d'athlètes féminines par année :\")\n\n[1] \"Discipline des JO d'été avec la plus grande taille d'athlètes féminines par année :\"\n\n\n\n\n\n\nlibrary(dplyr)\n\ndiscipline_plus_grande_frequence2 &lt;- plus_grande_taille_discipline_par_annee |&gt; \n  group_by(Sport) |&gt; \n  summarise(frequence = n()) |&gt; \n  arrange(desc(frequence)) |&gt; \n  distinct()\n\nLa deuxième méthode permet de classer les disciplines par fréquence, assurant ainsi que la discipline la plus fréquente apparaîtra en premier.\n\nprint(plus_grande_taille_discipline_par_annee, n = 60)\n\n# A tibble: 48 × 4\n# Groups:   Year, .groups [34]\n   Sport           Year .groups   taille_max\n   &lt;chr&gt;          &lt;int&gt; &lt;chr&gt;          &lt;dbl&gt;\n 1 Archery         1904 drop_last          0\n 2 Archery         1908 drop_last          0\n 3 Athletics       1948 drop_last        180\n 4 Athletics       1952 drop_last        188\n 5 Athletics       1956 drop_last        185\n 6 Athletics       1964 drop_last        188\n 7 Athletics       1968 drop_last        188\n 8 Athletics       1972 drop_last        190\n 9 Basketball      1976 drop_last        210\n10 Basketball      1980 drop_last        210\n11 Basketball      1984 drop_last        205\n12 Basketball      1988 drop_last        204\n13 Basketball      1992 drop_last        204\n14 Basketball      1996 drop_last        204\n15 Basketball      2000 drop_last        213\n16 Basketball      2004 drop_last        202\n17 Basketball      2008 drop_last        202\n18 Basketball      2012 drop_last        206\n19 Basketball      2016 drop_last        203\n20 Bobsleigh       2002 drop_last        187\n21 Bobsleigh       2006 drop_last        187\n22 Bobsleigh       2010 drop_last        194\n23 Croquet         1900 drop_last          0\n24 Diving          1912 drop_last          0\n25 Diving          1920 drop_last        175\n26 Equestrianism   1900 drop_last          0\n27 Fencing         1924 drop_last        175\n28 Fencing         1928 drop_last        183\n29 Fencing         1932 drop_last        183\n30 Fencing         1936 drop_last        183\n31 Figure Skating  1908 drop_last          0\n32 Golf            1900 drop_last          0\n33 Ice Hockey      2014 drop_last        186\n34 Luge            1994 drop_last        187\n35 Luge            1998 drop_last        187\n36 Motorboating    1908 drop_last          0\n37 Sailing         1900 drop_last          0\n38 Sailing         1908 drop_last          0\n39 Swimming        1912 drop_last          0\n40 Swimming        1960 drop_last        186\n41 Tennis          1900 drop_last          0\n42 Tennis          1906 drop_last          0\n43 Tennis          1908 drop_last          0\n44 Tennis          1912 drop_last          0\n45 Tennis          1924 drop_last        175\n46 Volleyball      1964 drop_last        188\n47 Volleyball      2004 drop_last        202\n48 Volleyball      2008 drop_last        202\n\n\nLa plus grande taille par discipline est observée dans le basketball, atteignant 213 cm.\n\nprint(discipline_plus_grande_frequence)\n\n# A tibble: 17 × 3\n# Groups:   Sport [17]\n   Sport          .groups   frequence\n   &lt;chr&gt;          &lt;chr&gt;         &lt;int&gt;\n 1 Archery        drop_last         2\n 2 Athletics      drop_last         6\n 3 Basketball     drop_last        11\n 4 Bobsleigh      drop_last         3\n 5 Croquet        drop_last         1\n 6 Diving         drop_last         2\n 7 Equestrianism  drop_last         1\n 8 Fencing        drop_last         4\n 9 Figure Skating drop_last         1\n10 Golf           drop_last         1\n11 Ice Hockey     drop_last         1\n12 Luge           drop_last         2\n13 Motorboating   drop_last         1\n14 Sailing        drop_last         2\n15 Swimming       drop_last         2\n16 Tennis         drop_last         5\n17 Volleyball     drop_last         3\n\nprint(discipline_plus_grande_frequence2)\n\n# A tibble: 17 × 2\n   Sport          frequence\n   &lt;chr&gt;              &lt;int&gt;\n 1 Basketball            11\n 2 Athletics              6\n 3 Tennis                 5\n 4 Fencing                4\n 5 Bobsleigh              3\n 6 Volleyball             3\n 7 Archery                2\n 8 Diving                 2\n 9 Luge                   2\n10 Sailing                2\n11 Swimming               2\n12 Croquet                1\n13 Equestrianism          1\n14 Figure Skating         1\n15 Golf                   1\n16 Ice Hockey             1\n17 Motorboating           1\n\n\nSur l’ensemble des éditions, le basketball a été la discipline avec les plus grandes athlètes féminines à 11 reprises.\n\n\n\n\n\n\n\n\ntexte &lt;- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\"\n\n\n\n\n\n\nVous disposez du texte suivant :\nLes jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\n\n\n\n\n\n\n\n\nformat_date &lt;- \"\\\\b\\\\d{1,2} (Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre) \\\\d{4}\\\\b\"\n\ndatesJO &lt;- str_extract_all(texte, format_date)[[1]]\nprint(datesJO)\n\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n\n\nLes dates mentionnées ci-dessus correspondent aux différentes éditions des Jeux Olympiques.\n\n\n\n\n\n\nmois_num &lt;- function(mois) {\n  mois &lt;- tolower(mois)\n  mois_num &lt;- c(\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\")\n  return(match(mois, mois_num))\n}\n\ndates_num &lt;- str_replace_all(datesJO, format_date, function(match) {\n  elements &lt;- str_split(match, \" \")[[1]]\n  elements[2] &lt;- mois_num(elements[2])\n  return(paste(elements, collapse = \" \"))\n})\n\nprint(dates_num)\n\n[1] \"5 8 2016\"  \"20 8 2016\" \"23 7 2021\" \"8 8 2021\"  \"26 7 2024\" \"11 8 2024\"\n\n\nLe remplacement des noms des mois par leur numéro a bien fonctionné.\n\n\n\n\n\n\n\nconvertion &lt;- function(date_texte) {\n  elements &lt;- str_split(date_texte, \" \")[[1]]\n  jour &lt;- as.integer(elements[1])\n  mois &lt;- as.integer(elements[2])\n  annee &lt;- as.integer(elements[3])\n  return(dmy(paste(jour, mois, annee, sep = \"-\")))\n}\n\ndates_converties &lt;- sapply(dates_num, convertion)\ndates_converties\n\n 5 8 2016 20 8 2016 23 7 2021  8 8 2021 26 7 2024 11 8 2024 \n    17018     17033     18831     18847     19930     19946 \n\n\nLa conversion a également bien fonctionné.\n\n\n\n\n\n\n\n\n\n\nlibrary(lubridate)\nParisDate &lt;- dmy(\"26 Juillet 2024\", locale = \"fr_FR\")\nTokyoDate &lt;- dmy(\"23 Juillet 2021\", locale = \"fr_FR\")\nRioDate &lt;- dmy(\"5 Août 2016\", locale = \"fr_FR\")\n\n\n\n\nRio_Tokyo_jours &lt;- as.numeric(difftime(TokyoDate, RioDate, units = \"days\"))\ncat(\"Nombre de jours entre Rio et Tokyo :\", Rio_Tokyo_jours, \"jours\\n\")\n\nNombre de jours entre Rio et Tokyo : 1813 jours\n\n\n1 813 jours séparent les éditions de Rio en 2016 et de Tokyo en 2021.\n\n\n\n\nTokyo_Paris_jours &lt;- as.numeric(difftime(ParisDate, TokyoDate, units = \"days\"))\ncat(\"Nombre de jours entre Tokyo et Paris :\", Tokyo_Paris_jours, \"jours\\n\")\n\nNombre de jours entre Tokyo et Paris : 1099 jours\n\n\n1 099 jours séparent les éditions de Tokyo en 2021 et de Paris en 2024.\n\n\n\n\nRio_Tokyo_semaines &lt;- as.numeric(difftime(TokyoDate, RioDate, units = \"weeks\"))\n\ncat(\"Nombre de semaines entre Rio et Tokyo :\", Rio_Tokyo_semaines, \"semaines\\n\")\n\nNombre de semaines entre Rio et Tokyo : 259 semaines\n\n\n259 semaines séparent les éditions de Rio en 2016 et de Tokyo en 2021.\n\n\n\n\nTokyo_Paris_semaines &lt;- as.numeric(difftime(ParisDate, TokyoDate, units = \"weeks\"))\n\ncat(\"Nombre de semaines entre Tokyo et Paris :\", Tokyo_Paris_semaines, \"semaines\\n\")\n\nNombre de semaines entre Tokyo et Paris : 157 semaines\n\n\n157 semaines séparent les éditions de Tokyo en 2021 et de Paris en 2024."
  }
]