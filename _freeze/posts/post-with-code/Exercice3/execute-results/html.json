{
  "hash": "0bc631b7a6b3553ec4a2a5bd90f01343",
  "result": {
    "markdown": "---\ntitle: \"Exercices - Semaine 3\"\ndate: \"2024-03-07\"\ncategories: [code, analysis]\nimage: \"image.jpg\"\n---\n\n\n## Exercices - Semaine 3\n\n### Préparation.  \n\n::: {style=\"text-align: justify;\"}\nDémarrez un nouveau projet rstudio intitulé TP3. Nous allons avoir besoin de plusieurs librairies aujourd’hui. Installez les en utilisant la commande suivante:\n\ninstall.packages(c(\"stringr\", \"lubridate\", \"arrow\", \"dplyr\", \"tidyr\", \"jsonlite\", \"RSQLite\"))\n\nÀ la racine du projet, créez un dossier data. Téléchargez les données associées au TP3 et décompressez les dans le dossier data. Supprimez le fichier .zip.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(c(\"stringr\", \"lubridate\", \"arrow\", \"dplyr\", \"tidyr\", \"jsonlite\", \"RSQLite\"))\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(arrow)\nlibrary(tidyr)\nlibrary(jsonlite)\nlibrary(RSQLite)\n```\n:::\n\n\n### Exercice\n\n### Import et lecture des données\n\n### Question 1\n\n#### Listez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- list.files(\"data\")\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n\n```{.r .cell-code}\nextensions <- tools::file_ext(data)\nprint(extensions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlogical(0)\n```\n:::\n:::\n\n\nIl y a 3 fichiers dans le dossier data dont un sous format sqlite, un autre json et le dernier parquet.\n\n### Question 2\n\n#### Lisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo <- read_parquet(\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/tokyo_athletes.parquet\")\ndim(tokyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11085     3\n```\n:::\n\n```{.r .cell-code}\nsummary(tokyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Name               NOC             Discipline       \n Length:11085       Length:11085       Length:11085      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n```\n:::\n:::\n\n\nLa table Tokyo compte 11 085 entrées et est structurée en 3 colonnes.\n\nLes 3 colonnes présentes sont : Name, NOC et Discipline.\n\n### Question 3\n\n#### Lisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics <- read_json(\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/olympics_athletes.json\")\ndim(olympics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\n#str(olympics)\nnames(olympics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(olympics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 269731\n```\n:::\n:::\n\n\nIl y a un total de 269 731 éléments dans l'objet \"olympics\".\n\nLes colonnes présentes sont les suivantes :\\\n\n-   ID\n\n-   Name\n\n-   Sex\n\n-   Age\n\n-   Height\n\n-   Weight\n\n-   Team\n\n-   NOC\n\n-   Games\n\n-   City\n\n-   Sport\n\n-   Event\n\n-   Medal\n\n### Question 4\n\n#### Importez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconnexion <- dbConnect(drv=RSQLite::SQLite(), dbname=\"~/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/data.sqlite\")\ntable <- dbListTables(connexion)\ntable\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n```\n:::\n:::\n\n\n### Question 5\n\n#### Créez deux nouvelles tables dans la base de données à l’aide de la fonction dbWriteTable. Les tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (dbIsValid(connexion)) {\n  \n  file_olympics <- \"/Users/ameldahmani/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/olympics_athletes.json\"\n  file_tokyo <- \"/Users/ameldahmani/Library/Mobile Documents/com~apple~CloudDocs/M1 ECAP/R avancé/data/tokyo_athletes.parquet\"\n  \n  tryCatch({\n    # Chargement des données json avec read_json\n    data_olympics <- read_json(file_olympics, simplifyVector = TRUE)\n    \n    #Convertion des données as.data.frame \n   \n   data_olympics_df <- as.data.frame(data_olympics)\n    \n    #dbWriteTable avec append=TRUE pour ajouter à la table déjà existante\n  dbWriteTable(connexion, \"olympics_athletes\", data_olympics_df, append = TRUE)\n    \n    #dbWriteTable avec overwrite=TRUE pour écraser la table existante\n  dbWriteTable(connexion, \"tokyo_athletes\", read_parquet(file_tokyo), overwrite = TRUE)\n  }, error = function(e) {\n    cat(\"Erreur lors de la lecture du fichier JSON :\", conditionMessage(e), \"\\n\")\n  })\n  \n} else {\n  cat(\"Erreur, la connexion à la base de données a échoué.\")\n}\n```\n:::\n\n\n### Question 6\n\n#### Inspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (dbIsValid(connexion)) {\n  colonnes_olympics <- dbListFields(connexion, \"olympics_athletes\")\n  print(colonnes_olympics)\n} else {\n  cat(\"Erreur, la connexion à la base de données a échoué.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\nLes colonnes de la table sont les suivantes :\\\n- ID\\\n- Name\\\n- Sex\\\n- Age\\\n- Height\\\n- Weight\\\n- Team\\\n- NOC\\\n- Games\\\n- City\\\n- Sport\\\n- Event\\\n- Medal\n\n### Question 7\n\n#### Importez cette table depuis la base de données en utilisant la fonction dbReadTable.\n\n#### Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (dbIsValid(connexion)) {\n  \n  nomdelatable <- \"olympics_athletes\"\n  \n  table_importee <- dbReadTable(connexion, nomdelatable)\n  \n  tibbleresultat <- as_tibble(table_importee)\n  \n  print(tibbleresultat)\n  \n} else {\n  cat(\"Erreur, la connexion à la base de données a échoué.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,348,655 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   <int> <chr>     <chr> <int>  <int>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr>\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 1 more variable: Medal <chr>\n```\n:::\n:::\n\n\n### Dans les questions suivantes, utilisez en priorité les fonctions des packages dplyr, tidyr.\n\n### dplyr, tidyr\n\n#### Dans les questions suivantes, utilisez en priorité les fonctions des packages dplyr, tidyr.\n\n### Question 8\n\n#### Convertissez la colonne Sex en variable catégorielle avec la fonction mutate\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibbleresultat <- tibbleresultat|> \n  mutate(Sex = as.factor(Sex))\nprint(tibbleresultat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,348,655 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   <int> <chr>     <fct> <int>  <int>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr>\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 1 more variable: Medal <chr>\n```\n:::\n\n```{.r .cell-code}\nstr(tibbleresultat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [1,348,655 × 13] (S3: tbl_df/tbl/data.frame)\n $ ID    : int [1:1348655] 1 2 3 4 5 5 5 5 5 5 ...\n $ Name  : chr [1:1348655] \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex   : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 1 1 1 1 1 1 ...\n $ Age   : int [1:1348655] 24 23 24 34 21 21 25 25 27 27 ...\n $ Height: int [1:1348655] 180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight: num [1:1348655] 80 60 NA NA 82 82 82 82 82 82 ...\n $ Team  : chr [1:1348655] \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC   : chr [1:1348655] \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Games : chr [1:1348655] \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" ...\n $ City  : chr [1:1348655] \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport : chr [1:1348655] \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event : chr [1:1348655] \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal : chr [1:1348655] NA NA NA \"Gold\" ...\n```\n:::\n:::\n\n\nLa colonne Sex a bien été convertie en variable catégorielle.\n\n### Question 9\n\n#### Créez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibbleresultat <- tibbleresultat |> \n  separate(Games, into = c(\"Year\", \"isSummer\"), sep = \" \", convert = TRUE)\nprint(tibbleresultat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,348,655 × 14\n      ID Name   Sex     Age Height Weight Team  NOC    Year isSummer City  Sport\n   <int> <chr>  <fct> <int>  <int>  <dbl> <chr> <chr> <int> <chr>    <chr> <chr>\n 1     1 A Dij… M        24    180     80 China CHN    1992 Summer   Barc… Bask…\n 2     2 A Lam… M        23    170     60 China CHN    2012 Summer   Lond… Judo \n 3     3 Gunna… M        24     NA     NA Denm… DEN    1920 Summer   Antw… Foot…\n 4     4 Edgar… M        34     NA     NA Denm… DEN    1900 Summer   Paris Tug-…\n 5     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 6     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 7     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 8     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 9     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n10     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 2 more variables: Event <chr>, Medal <chr>\n```\n:::\n\n```{.r .cell-code}\ntibbleresultat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,348,655 × 14\n      ID Name   Sex     Age Height Weight Team  NOC    Year isSummer City  Sport\n   <int> <chr>  <fct> <int>  <int>  <dbl> <chr> <chr> <int> <chr>    <chr> <chr>\n 1     1 A Dij… M        24    180     80 China CHN    1992 Summer   Barc… Bask…\n 2     2 A Lam… M        23    170     60 China CHN    2012 Summer   Lond… Judo \n 3     3 Gunna… M        24     NA     NA Denm… DEN    1920 Summer   Antw… Foot…\n 4     4 Edgar… M        34     NA     NA Denm… DEN    1900 Summer   Paris Tug-…\n 5     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 6     5 Chris… F        21    185     82 Neth… NED    1988 Winter   Calg… Spee…\n 7     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 8     5 Chris… F        25    185     82 Neth… NED    1992 Winter   Albe… Spee…\n 9     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n10     5 Chris… F        27    185     82 Neth… NED    1994 Winter   Lill… Spee…\n# ℹ 1,348,645 more rows\n# ℹ 2 more variables: Event <chr>, Medal <chr>\n```\n:::\n:::\n\n\nLes colonnes Year et isSummer ont bien été crées.\n\n#### Les questions suivantes nécessitent l’application de plusieurs instructions en séquence. Essayez tant que possible de chaîner les instructions avec des pipes (%\\>% ou \\|\\>).\n\n### Question 10\n\n#### Calculez la moyenne d’age des athletes pour chacune des éditions des JO d’été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMoyenne_age <- tibbleresultat |> \n  group_by(Year) |> \n  summarise(moyenne_age = mean(Age, na.rm = TRUE))\nprint(Moyenne_age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 35 × 2\n    Year moyenne_age\n   <int>       <dbl>\n 1  1896        23.6\n 2  1900        28.9\n 3  1904        26.7\n 4  1906        27.1\n 5  1908        27.0\n 6  1912        27.5\n 7  1920        29.3\n 8  1924        28.0\n 9  1928        27.9\n10  1932        29.6\n# ℹ 25 more rows\n```\n:::\n:::\n\n\n##### Athlètes les plus jeunes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplusjeunes <- Moyenne_age |> \n  filter(moyenne_age == min(moyenne_age, na.rm = TRUE))\nprint(plusjeunes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year moyenne_age\n  <int>       <dbl>\n1  1896        23.6\n```\n:::\n:::\n\n\nL'édition de 1896 a présenté les athlètes les plus jeunes, avec une moyenne d'âge de 23,6 ans.\n\n##### Athlètes les plus vieux\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplusvieux <- Moyenne_age |>  \n  filter(moyenne_age == max(moyenne_age, na.rm = TRUE))\nprint(plusvieux)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year moyenne_age\n  <int>       <dbl>\n1  1932        29.6\n```\n:::\n:::\n\n\nL'édition de 1932 a accueilli les athlètes les plus âgés, avec une moyenne d'âge de 29,6 ans.\n\n### Question 11\n\n#### Quelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande? Quelle a été cette discipline au cours de chacune des éditions ? Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes\n\n##### méthode 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes_femmes <- tibbleresultat |> \n  filter(Sex == \"F\")\n\nathletes_femmes <- athletes_femmes |> \n  mutate(Height = ifelse(is.na(Height), 0, Height))\n\nplus_grande_taille_par_discipline <- athletes_femmes |> \n  group_by(Sport, Year, .groups = \"drop_last\") |> \n  summarise(taille_max = max(Height, na.rm = TRUE), .groups = \"drop_last\")\n\nplus_grande_taille_discipline_par_annee <- plus_grande_taille_par_discipline |> \n  group_by(Year, .groups = \"drop_last\") |> \n  filter(taille_max == max(taille_max, na.rm = TRUE), .groups == \"drop_last\")\n\ndiscipline_plus_grande_frequence <- plus_grande_taille_discipline_par_annee |> \n  group_by(Sport, .groups = \"drop_last\") |> \n  summarise(frequence = n(), .groups = \"drop_last\")\nprint(\"Discipline des JO d'été avec la plus grande taille d'athlètes féminines par année :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Discipline des JO d'été avec la plus grande taille d'athlètes féminines par année :\"\n```\n:::\n:::\n\n\n##### méthode 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ndiscipline_plus_grande_frequence2 <- plus_grande_taille_discipline_par_annee |> \n  group_by(Sport) |> \n  summarise(frequence = n()) |> \n  arrange(desc(frequence)) |> \n  distinct()\n```\n:::\n\n\nLa deuxième méthode permet de classer les disciplines par fréquence, assurant ainsi que la discipline la plus fréquente apparaîtra en premier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(plus_grande_taille_discipline_par_annee, n = 60)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48 × 4\n# Groups:   Year, .groups [34]\n   Sport           Year .groups   taille_max\n   <chr>          <int> <chr>          <dbl>\n 1 Archery         1904 drop_last          0\n 2 Archery         1908 drop_last          0\n 3 Athletics       1948 drop_last        180\n 4 Athletics       1952 drop_last        188\n 5 Athletics       1956 drop_last        185\n 6 Athletics       1964 drop_last        188\n 7 Athletics       1968 drop_last        188\n 8 Athletics       1972 drop_last        190\n 9 Basketball      1976 drop_last        210\n10 Basketball      1980 drop_last        210\n11 Basketball      1984 drop_last        205\n12 Basketball      1988 drop_last        204\n13 Basketball      1992 drop_last        204\n14 Basketball      1996 drop_last        204\n15 Basketball      2000 drop_last        213\n16 Basketball      2004 drop_last        202\n17 Basketball      2008 drop_last        202\n18 Basketball      2012 drop_last        206\n19 Basketball      2016 drop_last        203\n20 Bobsleigh       2002 drop_last        187\n21 Bobsleigh       2006 drop_last        187\n22 Bobsleigh       2010 drop_last        194\n23 Croquet         1900 drop_last          0\n24 Diving          1912 drop_last          0\n25 Diving          1920 drop_last        175\n26 Equestrianism   1900 drop_last          0\n27 Fencing         1924 drop_last        175\n28 Fencing         1928 drop_last        183\n29 Fencing         1932 drop_last        183\n30 Fencing         1936 drop_last        183\n31 Figure Skating  1908 drop_last          0\n32 Golf            1900 drop_last          0\n33 Ice Hockey      2014 drop_last        186\n34 Luge            1994 drop_last        187\n35 Luge            1998 drop_last        187\n36 Motorboating    1908 drop_last          0\n37 Sailing         1900 drop_last          0\n38 Sailing         1908 drop_last          0\n39 Swimming        1912 drop_last          0\n40 Swimming        1960 drop_last        186\n41 Tennis          1900 drop_last          0\n42 Tennis          1906 drop_last          0\n43 Tennis          1908 drop_last          0\n44 Tennis          1912 drop_last          0\n45 Tennis          1924 drop_last        175\n46 Volleyball      1964 drop_last        188\n47 Volleyball      2004 drop_last        202\n48 Volleyball      2008 drop_last        202\n```\n:::\n:::\n\n\nLa plus grande taille par discipline est observée dans le basketball, atteignant 213 cm.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(discipline_plus_grande_frequence)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 3\n# Groups:   Sport [17]\n   Sport          .groups   frequence\n   <chr>          <chr>         <int>\n 1 Archery        drop_last         2\n 2 Athletics      drop_last         6\n 3 Basketball     drop_last        11\n 4 Bobsleigh      drop_last         3\n 5 Croquet        drop_last         1\n 6 Diving         drop_last         2\n 7 Equestrianism  drop_last         1\n 8 Fencing        drop_last         4\n 9 Figure Skating drop_last         1\n10 Golf           drop_last         1\n11 Ice Hockey     drop_last         1\n12 Luge           drop_last         2\n13 Motorboating   drop_last         1\n14 Sailing        drop_last         2\n15 Swimming       drop_last         2\n16 Tennis         drop_last         5\n17 Volleyball     drop_last         3\n```\n:::\n\n```{.r .cell-code}\nprint(discipline_plus_grande_frequence2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 2\n   Sport          frequence\n   <chr>              <int>\n 1 Basketball            11\n 2 Athletics              6\n 3 Tennis                 5\n 4 Fencing                4\n 5 Bobsleigh              3\n 6 Volleyball             3\n 7 Archery                2\n 8 Diving                 2\n 9 Luge                   2\n10 Sailing                2\n11 Swimming               2\n12 Croquet                1\n13 Equestrianism          1\n14 Figure Skating         1\n15 Golf                   1\n16 Ice Hockey             1\n17 Motorboating           1\n```\n:::\n:::\n\n\nSur l'ensemble des éditions, le basketball a été la discipline avec les plus grandes athlètes féminines à 11 reprises.\n\n### Vous disposez du texte suivant :\n\n###### Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte <- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\"\n```\n:::\n\n\n### stringr, lubridate\n\n::: {style=\"text-align: justify;\"}\nVous disposez du texte suivant :\n\nLes jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\n:::\n\n### Question 12\n\n::: {style=\"text-align: justify;\"}\n#### En utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que “26 Juillet 2024”. Vous pourrez utiliser cette regex avec la fonction str_extract_all par exemple.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat_date <- \"\\\\b\\\\d{1,2} (Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre) \\\\d{4}\\\\b\"\n\ndatesJO <- str_extract_all(texte, format_date)[[1]]\nprint(datesJO)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n```\n:::\n:::\n\n\nLes dates mentionnées ci-dessus correspondent aux différentes éditions des Jeux Olympiques.\n\n### Question 13\n\n#### Remplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmois_num <- function(mois) {\n  mois <- tolower(mois)\n  mois_num <- c(\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\")\n  return(match(mois, mois_num))\n}\n\ndates_num <- str_replace_all(datesJO, format_date, function(match) {\n  elements <- str_split(match, \" \")[[1]]\n  elements[2] <- mois_num(elements[2])\n  return(paste(elements, collapse = \" \"))\n})\n\nprint(dates_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 8 2016\"  \"20 8 2016\" \"23 7 2021\" \"8 8 2021\"  \"26 7 2024\" \"11 8 2024\"\n```\n:::\n:::\n\n\nLe remplacement des noms des mois par leur numéro a bien fonctionné.\n\n### Question 14\n\n#### Convertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconvertion <- function(date_texte) {\n  elements <- str_split(date_texte, \" \")[[1]]\n  jour <- as.integer(elements[1])\n  mois <- as.integer(elements[2])\n  annee <- as.integer(elements[3])\n  return(dmy(paste(jour, mois, annee, sep = \"-\")))\n}\n\ndates_converties <- sapply(dates_num, convertion)\ndates_converties\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 5 8 2016 20 8 2016 23 7 2021  8 8 2021 26 7 2024 11 8 2024 \n    17018     17033     18831     18847     19930     19946 \n```\n:::\n:::\n\n\nLa conversion a également bien fonctionné.\n\n### Question 15\n\n#### Combien de jours ont séparés les éditions de Rio et Tokyo ?\n\n#### Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\nParisDate <- dmy(\"26 Juillet 2024\", locale = \"fr_FR\")\nTokyoDate <- dmy(\"23 Juillet 2021\", locale = \"fr_FR\")\nRioDate <- dmy(\"5 Août 2016\", locale = \"fr_FR\")\n```\n:::\n\n\n##### Jours qui séparent Rio et Tokyo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRio_Tokyo_jours <- as.numeric(difftime(TokyoDate, RioDate, units = \"days\"))\ncat(\"Nombre de jours entre Rio et Tokyo :\", Rio_Tokyo_jours, \"jours\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de jours entre Rio et Tokyo : 1813 jours\n```\n:::\n:::\n\n\n1 813 jours séparent les éditions de Rio en 2016 et de Tokyo en 2021.\n\n##### Jours qui séparent Tokyo et Paris\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTokyo_Paris_jours <- as.numeric(difftime(ParisDate, TokyoDate, units = \"days\"))\ncat(\"Nombre de jours entre Tokyo et Paris :\", Tokyo_Paris_jours, \"jours\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de jours entre Tokyo et Paris : 1099 jours\n```\n:::\n:::\n\n\n1 099 jours séparent les éditions de Tokyo en 2021 et de Paris en 2024.\n\n##### Semaines qui séparent Rio et Tokyo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRio_Tokyo_semaines <- as.numeric(difftime(TokyoDate, RioDate, units = \"weeks\"))\n\ncat(\"Nombre de semaines entre Rio et Tokyo :\", Rio_Tokyo_semaines, \"semaines\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de semaines entre Rio et Tokyo : 259 semaines\n```\n:::\n:::\n\n\n259 semaines séparent les éditions de Rio en 2016 et de Tokyo en 2021.\n\n##### Jours qui séparent Tokyo et Paris\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTokyo_Paris_semaines <- as.numeric(difftime(ParisDate, TokyoDate, units = \"weeks\"))\n\ncat(\"Nombre de semaines entre Tokyo et Paris :\", Tokyo_Paris_semaines, \"semaines\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNombre de semaines entre Tokyo et Paris : 157 semaines\n```\n:::\n:::\n\n\n157 semaines séparent les éditions de Tokyo en 2021 et de Paris en 2024.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}